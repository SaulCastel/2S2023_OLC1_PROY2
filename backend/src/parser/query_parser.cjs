/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var query_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,23],$V7=[1,22],$V8=[1,24],$V9=[1,26],$Va=[1,25],$Vb=[1,35],$Vc=[1,33],$Vd=[1,31],$Ve=[1,32],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,57],$Vn=[1,56],$Vo=[5,14,22,29,31,36,39,43,48,77,79,80],$Vp=[1,68],$Vq=[1,65],$Vr=[1,74],$Vs=[1,75],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,63],$Vz=[1,64],$VA=[1,66],$VB=[1,67],$VC=[7,24,30,35,50,51,56,58,60,62,65,66,67,68,69,70,71,72,73],$VD=[7,24,51],$VE=[2,46],$VF=[1,90],$VG=[7,24,51,56],$VH=[7,24,35,51,56,58,60,62],$VI=[1,117],$VJ=[1,112],$VK=[1,113],$VL=[1,114],$VM=[1,115],$VN=[1,116],$VO=[2,48],$VP=[1,136],$VQ=[7,24,30,35,51,56,58,60,62,65,66,67,68,69,70,71],$VR=[7,24,30,35,51,56,58,60,62,65,66,67,68,69],$VS=[7,24],$VT=[7,24,28,35],$VU=[24,35],$VV=[7,60,62],$VW=[7,24,58],$VX=[1,193],$VY=[1,191],$VZ=[1,190],$V_=[1,205],$V$=[1,203],$V01=[1,204],$V11=[1,206],$V21=[1,207],$V31=[7,35,50,60,62,70,71,72,73],$V41=[7,35,60,62,70,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"querys":3,"stmts":4,"EOF":5,"stmt":6,";":7,"var_declaration":8,"var_default":9,"var_assignment":10,"create_table":11,"alter_table":12,"drop_table":13,"PRINT":14,"expr":15,"select_from":16,"select_print":17,"insert_into":18,"update":19,"delete_from":20,"truncate":21,"DECLARE":22,"var_list":23,",":24,"@":25,"identifier":26,"type":27,"DEFAULT":28,"SET":29,"=":30,"CREATE":31,"TABLE":32,"(":33,"col_declaration":34,")":35,"ALTER":36,"alter_action":37,"ADD":38,"DROP":39,"COLUMN":40,"RENAME":41,"TO":42,"INSERT":43,"INTO":44,"column_list":45,"VALUES":46,"value_list":47,"SELECT":48,"selection":49,"*":50,"FROM":51,"where":52,"return_expr":53,"asign_alias":54,"native_func":55,"AS":56,"string_literal":57,"WHERE":58,"conditions":59,"AND":60,"condition":61,"OR":62,"column_name":63,"cond_expr":64,"!=":65,"<":66,"<=":67,">":68,">=":69,"+":70,"-":71,"/":72,"%":73,"literal":74,"CAST":75,"extended_expr":76,"UPDATE":77,"update_list":78,"TRUNCATE":79,"DELETE":80,"NOT":81,"INT_LITERAL":82,"DOUBLE_LITERAL":83,"DATE_LITERAL":84,"TRUE":85,"FALSE":86,"NULL":87,"INT":88,"DOUBLE":89,"DATE":90,"VARCHAR":91,"BOOLEAN":92,"ID":93,"STRING_LITERAL":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",14:"PRINT",22:"DECLARE",24:",",25:"@",28:"DEFAULT",29:"SET",30:"=",31:"CREATE",32:"TABLE",33:"(",35:")",36:"ALTER",38:"ADD",39:"DROP",40:"COLUMN",41:"RENAME",42:"TO",43:"INSERT",44:"INTO",46:"VALUES",48:"SELECT",50:"*",51:"FROM",56:"AS",58:"WHERE",60:"AND",62:"OR",65:"!=",66:"<",67:"<=",68:">",69:">=",70:"+",71:"-",72:"/",73:"%",75:"CAST",77:"UPDATE",79:"TRUNCATE",80:"DELETE",81:"NOT",82:"INT_LITERAL",83:"DOUBLE_LITERAL",84:"DATE_LITERAL",85:"TRUE",86:"FALSE",87:"NULL",88:"INT",89:"DOUBLE",90:"DATE",91:"VARCHAR",92:"BOOLEAN",93:"ID",94:"STRING_LITERAL"},
productions_: [0,[3,2],[4,3],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,2],[23,5],[23,3],[9,6],[10,5],[11,6],[34,4],[34,2],[12,4],[37,3],[37,3],[37,3],[37,5],[13,3],[18,10],[45,3],[45,1],[47,3],[47,1],[17,2],[16,5],[16,5],[49,4],[49,2],[53,1],[53,1],[53,1],[54,2],[54,2],[54,0],[52,2],[52,0],[59,3],[59,3],[59,1],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[63,1],[64,3],[64,3],[64,3],[64,3],[64,3],[64,2],[64,3],[64,1],[64,2],[55,6],[19,5],[78,5],[78,3],[21,3],[20,4],[76,1],[76,1],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,2],[15,3],[15,1],[15,2],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[26,1],[57,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = $$[$0-1]
        return this.$
    
break;
case 2:

        $$[$0-2].push($$[$0-1])
        this.$ = $$[$0-2]
    
break;
case 3:

        this.$ = []
        this.$.push($$[$0-1])
    
break;
case 10:
this.$ = new Stmt.Print(treeID++, $$[$0])
break;
case 17:
this.$ = new Stmt.Declare(treeID++, $$[$0])
break;
case 18:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 19: case 24: case 40:

        this.$ = []
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 20:
this.$ = new Stmt.DeclareDefault(treeID++, $$[$0-3], $$[$0-2], $$[$0])
break;
case 21:
this.$ = new Stmt.Set(treeID++, $$[$0-2], $$[$0])
break;
case 22:
this.$ = new Stmt.CreateTable(treeID++, $$[$0-3], $$[$0-1])
break;
case 23: case 39:

        this.$ = $$[$0-3]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 25:
this.$ = new Stmt.AlterTable(treeID++, $$[$0-1], $$[$0])
break;
case 26:
this.$ = ['ADD', $$[$0-1], $$[$0]]
break;
case 27:
this.$ = ['DROP', $$[$0]]
break;
case 28:
this.$ = ['RENAME', $$[$0]]
break;
case 29:
this.$ = ['RENAME_C', $$[$0-2], $$[$0]]
break;
case 30:
this.$ = new Stmt.DropTable(treeID++, $$[$0])
break;
case 31:
this.$ = new Stmt.InsertInto(treeID++, $$[$0-7], $$[$0-5], $$[$0-1])
break;
case 32: case 34:

        this.$ = $$[$0-2]
        this.$.push($$[$0])
    
break;
case 33: case 35:

        this.$ = []
        this.$.push($$[$0])
    
break;
case 36:
this.$ = new Stmt.Select(treeID++, $$[$0])
break;
case 37: case 38:
this.$ = new Stmt.SelectFrom(treeID++, $$[$0-1], $$[$0-3], $$[$0])
break;
case 41: case 74:
this.$ = new Expr.Identifier(treeID++, $$[$0])
break;
case 44: case 45: case 47:
this.$ = $$[$0]
break;
case 49: case 87:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'AND', $$[$0])
break;
case 50: case 88:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'OR', $$[$0])
break;
case 52: case 53: case 54: case 55: case 56: case 57: case 59: case 60: case 61: case 62: case 63: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86:
this.$ = new Expr.Binary(treeID++, $$[$0-2], $$[$0-1], $$[$0])
break;
case 58: case 67: case 93:
this.$ = new Expr.Variable(treeID++, $$[$0])
break;
case 64: case 89:
this.$ = new Expr.Unary(treeID++, $$[$0-1], $$[$0])
break;
case 65: case 91:
this.$ = new Expr.Group(treeID++, $$[$0-1])
break;
case 68:
this.$ = new Expr.Cast(treeID++, $$[$0-3], $$[$0-1])
break;
case 69:
this.$ = new Stmt.UpdateTable(treeID++, $$[$0-3], $$[$0-1], $$[$0])
break;
case 70:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 71:

        this.$ = []
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 72:
this.$ = new Stmt.TruncateTable(treeID++, $$[$0])
break;
case 73:
this.$ = new Stmt.DeleteFrom(treeID++, $$[$0-1], $$[$0])
break;
case 90:
this.$ = new Expr.Unary(treeID++, 'NOT', $$[$0])
break;
case 94:
this.$ = new Expr.Literal(treeID++, 'INT', $$[$0])
break;
case 95:
this.$ = new Expr.Literal(treeID++, 'DOUBLE', $$[$0])
break;
case 96:
this.$ = new Expr.Literal(treeID++, 'DATE', $$[$0])
break;
case 97:
this.$ = new Expr.Literal(treeID++, 'STRING', $$[$0])
break;
case 98: case 99:
this.$ = new Expr.Literal(treeID++, 'BOOLEAN', $$[$0])
break;
case 100:
this.$ = new Expr.Literal(treeID++, 'NULL', $$[$0])
break;
case 101: case 102: case 103: case 105: case 106:
this.$ = $$[$0].toUpperCase()
break;
case 104:
this.$ = 'STRING'
break;
case 107:
this.$ = $$[$0].toLowerCase()
break;
case 108:
this.$ = $$[$0].slice(1,-1)
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:7,12:8,13:9,14:$V0,16:11,17:12,18:13,19:14,20:15,21:16,22:$V1,29:$V2,31:$V3,36:$V4,39:$V5,43:$V6,48:$V7,77:$V8,79:$V9,80:$Va},{1:[3]},{5:[1,27],6:28,8:4,9:5,10:6,11:7,12:8,13:9,14:$V0,16:11,17:12,18:13,19:14,20:15,21:16,22:$V1,29:$V2,31:$V3,36:$V4,39:$V5,43:$V6,48:$V7,77:$V8,79:$V9,80:$Va},{7:[1,29]},{7:[2,4]},{7:[2,5]},{7:[2,6]},{7:[2,7]},{7:[2,8]},{7:[2,9]},{15:30,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{23:44,25:[1,45]},{25:[1,46]},{32:[1,47]},{32:[1,48]},{32:[1,49]},{15:55,25:$Vb,26:53,33:$Vc,49:51,50:[1,50],53:52,55:54,57:39,71:$Vd,74:34,75:$Vm,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,93:$Vn,94:$Vl},{44:[1,58]},{26:59,93:$Vn},{51:[1,60]},{32:[1,61]},{1:[2,1]},{7:[1,62]},o($Vo,[2,3]),{7:[2,10],30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{15:76,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:77,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:78,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},o($VC,[2,92]),{26:79,93:$Vn},o($VC,[2,94]),o($VC,[2,95]),o($VC,[2,96]),o($VC,[2,97]),o($VC,[2,98]),o($VC,[2,99]),o($VC,[2,100]),o($VC,[2,108]),{7:[2,17],24:[1,80]},{26:81,93:$Vn},{26:82,93:$Vn},{26:83,93:$Vn},{26:84,93:$Vn},{26:85,93:$Vn},{51:[1,86]},{7:[2,36],24:[1,88],51:[1,87]},o($VD,$VE,{54:89,56:$VF}),o($VG,[2,41]),o($VG,[2,42]),o($VG,[2,43],{30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o([7,24,29,30,33,35,38,39,41,42,50,51,56,58,60,62,65,66,67,68,69,70,71,72,73,87,88,89,90,91,92],[2,107]),{33:[1,91]},{26:92,93:$Vn},{29:[1,93]},{26:94,93:$Vn},{26:95,93:$Vn},o($Vo,[2,2]),{15:96,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:97,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:98,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:99,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:100,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:101,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:102,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:103,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:104,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:105,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:106,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:107,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{15:108,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},o($VC,[2,89]),o($VH,[2,90],{30:$Vp,50:$Vq,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),{30:$Vp,35:[1,109],50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},o($VC,[2,93]),{25:[1,110]},{27:111,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN},{30:[1,118]},{33:[1,119]},{37:120,38:[1,121],39:[1,122],41:[1,123]},{7:[2,30]},{26:124,93:$Vn},{26:125,93:$Vn},{15:55,25:$Vb,26:53,33:$Vc,53:126,55:54,57:39,71:$Vd,74:34,75:$Vm,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,93:$Vn,94:$Vl},o($VD,[2,40]),{26:127,57:128,93:$Vn,94:$Vl},{15:131,25:$Vb,26:130,33:$Vc,57:39,71:$Vd,74:34,76:129,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,93:$Vn,94:$Vl},{33:[1,132]},{26:134,78:133,93:$Vn},{7:$VO,52:135,58:$VP},{7:[2,72]},o($VQ,[2,76],{50:$Vq,72:$VA,73:$VB}),o($VQ,[2,77],{50:$Vq,72:$VA,73:$VB}),o($VC,[2,78]),o($VC,[2,79]),o($VC,[2,80]),o($VR,[2,81],{50:$Vq,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VR,[2,82],{50:$Vq,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VR,[2,83],{50:$Vq,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VR,[2,84],{50:$Vq,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VR,[2,85],{50:$Vq,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VR,[2,86],{50:$Vq,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VH,[2,87],{30:$Vp,50:$Vq,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o([7,24,35,51,56,58,62],[2,88],{30:$Vp,50:$Vq,60:$Vr,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VC,[2,91]),{26:137,93:$Vn},o($VS,[2,19],{28:[1,138]}),o($VT,[2,101]),o($VT,[2,102]),o($VT,[2,103]),o($VT,[2,104]),o($VT,[2,105]),o($VT,[2,106]),{15:139,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{26:141,34:140,93:$Vn},{7:[2,25]},{26:142,93:$Vn},{40:[1,143]},{40:[1,145],42:[1,144]},{7:$VO,52:146,58:$VP},{7:$VO,52:147,58:$VP},o($VD,$VE,{54:148,56:$VF}),o($VD,[2,44]),o($VD,[2,45]),{56:[1,149]},{56:[2,74]},{30:$Vp,50:$Vq,56:[2,75],60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{26:151,45:150,93:$Vn},{7:$VO,24:[1,153],52:152,58:$VP},{30:[1,154]},{7:[2,73]},{26:158,59:155,61:156,63:157,93:$Vn},{27:159,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN},{15:160,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{7:[2,21],30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{24:[1,162],35:[1,161]},{27:163,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN},{27:164,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN},{26:165,93:$Vn},{26:166,93:$Vn},{26:167,93:$Vn},{7:[2,37]},{7:[2,38]},o($VD,[2,39]),{27:168,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN},{24:[1,170],35:[1,169]},o($VU,[2,33]),{7:[2,69]},{26:171,93:$Vn},{15:172,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{7:[2,47],60:[1,173],62:[1,174]},o($VV,[2,51]),{30:[1,175],65:[1,176],66:[1,177],67:[1,178],68:[1,179],69:[1,180]},o([30,65,66,67,68,69],[2,58]),o($VS,[2,18]),{7:[2,20],30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB},{7:[2,22]},{26:181,93:$Vn},o($VU,[2,24]),{7:[2,26]},{7:[2,27]},{7:[2,28]},{42:[1,182]},{35:[1,183]},{46:[1,184]},{26:185,93:$Vn},{30:[1,186]},o($VW,[2,71],{30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),{26:158,61:187,63:157,93:$Vn},{26:158,61:188,63:157,93:$Vn},{25:$VX,33:$VY,57:39,64:189,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:194,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:195,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:196,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:197,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:198,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{27:199,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN},{26:200,93:$Vn},o($VG,[2,68]),{33:[1,201]},o($VU,[2,32]),{15:202,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},o($VV,[2,49]),o($VV,[2,50]),o($VV,[2,52],{50:$V_,70:$V$,71:$V01,72:$V11,73:$V21}),{25:$VX,33:$VY,57:39,64:208,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:209,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},o($V31,[2,66]),{26:210,93:$Vn},o($VV,[2,53],{50:$V_,70:$V$,71:$V01,72:$V11,73:$V21}),o($VV,[2,54],{50:$V_,70:$V$,71:$V01,72:$V11,73:$V21}),o($VV,[2,55],{50:$V_,70:$V$,71:$V01,72:$V11,73:$V21}),o($VV,[2,56],{50:$V_,70:$V$,71:$V01,72:$V11,73:$V21}),o($VV,[2,57],{50:$V_,70:$V$,71:$V01,72:$V11,73:$V21}),o($VU,[2,23]),{7:[2,29]},{15:212,25:$Vb,33:$Vc,47:211,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},o($VW,[2,70],{30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),{25:$VX,33:$VY,57:39,64:213,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:214,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:215,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:216,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},{25:$VX,33:$VY,57:39,64:217,71:$VZ,74:192,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},o($V31,[2,64]),{35:[1,218],50:$V_,70:$V$,71:$V01,72:$V11,73:$V21},o($V31,[2,67]),{24:[1,220],35:[1,219]},o($VU,[2,35],{30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($V41,[2,59],{50:$V_,72:$V11,73:$V21}),o($V41,[2,60],{50:$V_,72:$V11,73:$V21}),o($V31,[2,61]),o($V31,[2,62]),o($V31,[2,63]),o($V31,[2,65]),{7:[2,31]},{15:221,25:$Vb,33:$Vc,57:39,71:$Vd,74:34,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,94:$Vl},o($VU,[2,34],{30:$Vp,50:$Vq,60:$Vr,62:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB})],
defaultActions: {4:[2,4],5:[2,5],6:[2,6],7:[2,7],8:[2,8],9:[2,9],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],27:[2,1],85:[2,30],95:[2,72],120:[2,25],130:[2,74],135:[2,73],146:[2,37],147:[2,38],152:[2,69],161:[2,22],164:[2,26],165:[2,27],166:[2,28],200:[2,29],219:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Expr = require('../interpreter/Expression.cjs');
const Stmt = require('../interpreter/Statement.cjs');
var treeID = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* no hacer nada */
break;
case 1:/* no hacer nada */
break;
case 2:this.pushState('comment');
break;
case 3:this.popState();
break;
case 4:/* no hacer nada */
break;
case 5:/* no hacer nada */
break;
case 6:return 85
break;
case 7:return 86
break;
case 8:return 22
break;
case 9:return 28
break;
case 10:return 29
break;
case 11:return 31
break;
case 12:return 32
break;
case 13:return 36
break;
case 14:return 32
break;
case 15:return 38
break;
case 16:return 39
break;
case 17:return 41
break;
case 18:return 40
break;
case 19:return 42
break;
case 20:return 60
break;
case 21:return 62
break;
case 22:return 81
break;
case 23:return 88
break;
case 24:return 89
break;
case 25:return 90
break;
case 26:return 91
break;
case 27:return 92
break;
case 28:return 87
break;
case 29:return 14
break;
case 30:return 43
break;
case 31:return 44
break;
case 32:return 46
break;
case 33:return 48
break;
case 34:return 51
break;
case 35:return 58
break;
case 36:return 56
break;
case 37:return 77
break;
case 38:return 79
break;
case 39:return 80
break;
case 40:return 75
break;
case 41:return 7
break;
case 42:return 25
break;
case 43:return 24
break;
case 44:return 33
break;
case 45:return 35
break;
case 46:return 70
break;
case 47:return 71
break;
case 48:return 50
break;
case 49:return 72
break;
case 50:return 73
break;
case 51:return 30
break;
case 52:return 68
break;
case 53:return 69
break;
case 54:return 66
break;
case 55:return 67
break;
case 56:return 65
break;
case 57:return 84
break;
case 58:return 83
break;
case 59:return 82
break;
case 60:return 94
break;
case 61:return 93
break;
case 62:return 5
break;
case 63:return 'INVALID'
break;
case 64:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:--.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:[^\n]+)/i,/^(?:\n)/i,/^(?:true)/i,/^(?:false)/i,/^(?:declare)/i,/^(?:default)/i,/^(?:set)/i,/^(?:create)/i,/^(?:table)/i,/^(?:alter)/i,/^(?:table)/i,/^(?:add)/i,/^(?:drop)/i,/^(?:rename)/i,/^(?:column)/i,/^(?:to)/i,/^(?:and)/i,/^(?:or)/i,/^(?:not)/i,/^(?:int)/i,/^(?:double)/i,/^(?:date)/i,/^(?:varchar)/i,/^(?:boolean)/i,/^(?:null)/i,/^(?:print)/i,/^(?:insert)/i,/^(?:into)/i,/^(?:values)/i,/^(?:select)/i,/^(?:from)/i,/^(?:where)/i,/^(?:as)/i,/^(?:update)/i,/^(?:truncate)/i,/^(?:delete)/i,/^(?:cast)/i,/^(?:;)/i,/^(?:@)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:(19|20)\d\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01]))/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"(\\.|[^"\\])*")/i,/^(?:[a-z][a-z0-9_-]*)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[3,4,5],"inclusive":false},"INITIAL":{"rules":[0,1,2,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
/*
    Regex para string con caracteres de escape
    - https://stackoverflow.com/questions/2039795/regular-expression-for-a-string-literal-in-flex-lex

    Regex para comentario multilinea
    - https://westes.github.io/flex/manual/How-can-I-match-C_002dstyle-comments_003f.html
    - https://gerhobbelt.github.io/jison/docs/#lexical-analysis

    Regex para fecha
    - https://www.regular-expressions.info/dates.html
*/;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = query_parser;
exports.Parser = query_parser.Parser;
exports.parse = function () { return query_parser.parse.apply(query_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}