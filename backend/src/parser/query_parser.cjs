/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var query_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,25],$V2=[1,26],$V3=[1,27],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,21],$V8=[1,20],$V9=[1,22],$Va=[1,24],$Vb=[1,23],$Vc=[1,41],$Vd=[1,35],$Ve=[1,34],$Vf=[1,32],$Vg=[1,40],$Vh=[1,33],$Vi=[1,42],$Vj=[1,43],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,39],$Vo=[1,48],$Vp=[1,64],$Vq=[1,65],$Vr=[1,67],$Vs=[1,68],$Vt=[5,11,22,31,36,45,50,53,57,62,89,91,92],$Vu=[1,77],$Vv=[1,74],$Vw=[1,83],$Vx=[1,84],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,72],$VE=[1,73],$VF=[1,75],$VG=[1,76],$VH=[7,22,39,44,49,64,65,68,70,72,74,77,78,79,80,81,82,83,84,85],$VI=[7,39,65],$VJ=[2,54],$VK=[1,97],$VL=[7,22,39,49,65,68,70,72,74],$VM=[2,56],$VN=[1,139],$VO=[11,22,24,29,30,31,36,37,43,45,50,53,57,62,89,91,92],$VP=[7,22,39,44,49,65,68,70,72,74,77,78,79,80,81,82,83],$VQ=[7,22,39,44,49,65,68,70,72,74,77,78,79,80,81],$VR=[1,171],$VS=[1,166],$VT=[1,167],$VU=[1,168],$VV=[1,169],$VW=[1,170],$VX=[39,49],$VY=[7,72,74],$VZ=[7,39],$V_=[7,39,42,49],$V$=[7,39,70],$V01=[1,209],$V11=[1,208],$V21=[1,207],$V31=[1,225],$V41=[1,223],$V51=[1,224],$V61=[1,226],$V71=[1,227],$V81=[7,49,64,72,74,82,83,84,85],$V91=[7,49,72,74,82,83];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"querys":3,"stmts":4,"EOF":5,"stmt":6,";":7,"create_table":8,"alter_table":9,"drop_table":10,"PRINT":11,"expr":12,"select_from":13,"select_print":14,"insert_into":15,"update":16,"delete_from":17,"truncate":18,"block_stmt":19,"for_stmt":20,"while_stmt":21,"BEGIN":22,"extended_stmts":23,"END":24,"extended_stmt":25,"var_declaration":26,"var_default":27,"var_assignment":28,"BREAK":29,"CONTINUE":30,"FOR":31,"identifier":32,"IN":33,"INT_LITERAL":34,"..":35,"WHILE":36,"DECLARE":37,"var_list":38,",":39,"@":40,"type":41,"DEFAULT":42,"SET":43,"=":44,"CREATE":45,"TABLE":46,"(":47,"col_declaration":48,")":49,"ALTER":50,"alter_action":51,"ADD":52,"DROP":53,"COLUMN":54,"RENAME":55,"TO":56,"INSERT":57,"INTO":58,"column_list":59,"VALUES":60,"value_list":61,"SELECT":62,"selection":63,"*":64,"FROM":65,"where":66,"asign_alias":67,"AS":68,"string_literal":69,"WHERE":70,"conditions":71,"AND":72,"condition":73,"OR":74,"column_name":75,"cond_expr":76,"!=":77,"<":78,"<=":79,">":80,">=":81,"+":82,"-":83,"/":84,"%":85,"literal":86,"native_func":87,"CAST":88,"UPDATE":89,"update_list":90,"TRUNCATE":91,"DELETE":92,"NOT":93,"DOUBLE_LITERAL":94,"DATE_LITERAL":95,"TRUE":96,"FALSE":97,"NULL":98,"INT":99,"DOUBLE":100,"DATE":101,"VARCHAR":102,"BOOLEAN":103,"ID":104,"STRING_LITERAL":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",11:"PRINT",22:"BEGIN",24:"END",29:"BREAK",30:"CONTINUE",31:"FOR",33:"IN",34:"INT_LITERAL",35:"..",36:"WHILE",37:"DECLARE",39:",",40:"@",42:"DEFAULT",43:"SET",44:"=",45:"CREATE",46:"TABLE",47:"(",49:")",50:"ALTER",52:"ADD",53:"DROP",54:"COLUMN",55:"RENAME",56:"TO",57:"INSERT",58:"INTO",60:"VALUES",62:"SELECT",64:"*",65:"FROM",68:"AS",70:"WHERE",72:"AND",74:"OR",77:"!=",78:"<",79:"<=",80:">",81:">=",82:"+",83:"-",84:"/",85:"%",88:"CAST",89:"UPDATE",91:"TRUNCATE",92:"DELETE",93:"NOT",94:"DOUBLE_LITERAL",95:"DATE_LITERAL",96:"TRUE",97:"FALSE",98:"NULL",99:"INT",100:"DOUBLE",101:"DATE",102:"VARCHAR",103:"BOOLEAN",104:"ID",105:"STRING_LITERAL"},
productions_: [0,[3,2],[4,3],[4,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[23,3],[23,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[20,7],[21,3],[26,2],[38,5],[38,3],[27,6],[28,5],[8,6],[48,4],[48,2],[9,4],[51,3],[51,3],[51,3],[51,5],[10,3],[15,10],[59,3],[59,1],[61,3],[61,1],[14,2],[13,5],[13,5],[63,4],[63,2],[67,2],[67,2],[67,0],[66,2],[66,0],[71,3],[71,3],[71,1],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[75,1],[76,3],[76,3],[76,3],[76,3],[76,3],[76,2],[76,3],[76,2],[76,1],[87,6],[16,5],[90,5],[90,3],[18,3],[17,4],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,3],[12,2],[12,1],[12,1],[12,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[32,1],[69,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = $$[$0-1]
        return this.$
    
break;
case 2:

        $$[$0-2].push($$[$0-1])
        this.$ = $$[$0-2]
    
break;
case 3: case 19:

        this.$ = []
        this.$.push($$[$0-1])
    
break;
case 7:
this.$ = new Stmt.Print(treeID++, $$[$0])
break;
case 17:
this.$ = new Stmt.Block(treeID++, $$[$0-1])
break;
case 18:

        this.$ = $$[$0-2]
        this.$.push($$[$0-1])
    
break;
case 23:
this.$ = new Stmt.Break(treeID++)
break;
case 24:
this.$ = new Stmt.Continue(treeID++)
break;
case 26:
this.$ = new Stmt.For(treeID++, $$[$0-5], $$[$0-3], $$[$0-1], $$[$0])
break;
case 27:
this.$ = new Stmt.While(treeID++, $$[$0-1], $$[$0])
break;
case 28:
this.$ = new Stmt.Declare(treeID++, $$[$0])
break;
case 29:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 30: case 35: case 51:

        this.$ = []
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 31:
this.$ = new Stmt.DeclareDefault(treeID++, $$[$0-3], $$[$0-2], $$[$0])
break;
case 32:
this.$ = new Stmt.Set(treeID++, $$[$0-2], $$[$0])
break;
case 33:
this.$ = new Stmt.CreateTable(treeID++, $$[$0-3], $$[$0-1])
break;
case 34: case 50:

        this.$ = $$[$0-3]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 36:
this.$ = new Stmt.AlterTable(treeID++, $$[$0-1], $$[$0])
break;
case 37:
this.$ = ['ADD', $$[$0-1], $$[$0]]
break;
case 38:
this.$ = ['DROP', $$[$0]]
break;
case 39:
this.$ = ['RENAME', $$[$0]]
break;
case 40:
this.$ = ['RENAME_C', $$[$0-2], $$[$0]]
break;
case 41:
this.$ = new Stmt.DropTable(treeID++, $$[$0])
break;
case 42:
this.$ = new Stmt.InsertInto(treeID++, $$[$0-7], $$[$0-5], $$[$0-1])
break;
case 43: case 45:

        this.$ = $$[$0-2]
        this.$.push($$[$0])
    
break;
case 44: case 46:

        this.$ = []
        this.$.push($$[$0])
    
break;
case 47:
this.$ = new Stmt.Select(treeID++, $$[$0])
break;
case 48: case 49:
this.$ = new Stmt.SelectFrom(treeID++, $$[$0-1], $$[$0-3], $$[$0])
break;
case 52: case 53: case 55:
this.$ = $$[$0]
break;
case 57: case 93:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'AND', $$[$0])
break;
case 58: case 94:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'OR', $$[$0])
break;
case 60: case 61: case 62: case 63: case 64: case 65: case 67: case 68: case 69: case 70: case 71: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92:
this.$ = new Expr.Binary(treeID++, $$[$0-2], $$[$0-1], $$[$0])
break;
case 66: case 99:
this.$ = new Expr.Identifier(treeID++, $$[$0])
break;
case 72: case 95:
this.$ = new Expr.Unary(treeID++, $$[$0-1], $$[$0])
break;
case 73: case 97:
this.$ = new Expr.Group(treeID++, $$[$0-1])
break;
case 74: case 98:
this.$ = new Expr.Variable(treeID++, $$[$0])
break;
case 76:
this.$ = new Expr.Cast(treeID++, $$[$0-3], $$[$0-1])
break;
case 77:
this.$ = new Stmt.UpdateTable(treeID++, $$[$0-3], $$[$0-1], $$[$0])
break;
case 78:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 79:

        this.$ = []
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 80:
this.$ = new Stmt.TruncateTable(treeID++, $$[$0])
break;
case 81:
this.$ = new Stmt.DeleteFrom(treeID++, $$[$0-1], $$[$0])
break;
case 96:
this.$ = new Expr.Unary(treeID++, 'NOT', $$[$0])
break;
case 102:
this.$ = new Expr.Literal(treeID++, 'INT', $$[$0])
break;
case 103:
this.$ = new Expr.Literal(treeID++, 'DOUBLE', $$[$0])
break;
case 104:
this.$ = new Expr.Literal(treeID++, 'DATE', $$[$0])
break;
case 105:
this.$ = new Expr.Literal(treeID++, 'STRING', $$[$0])
break;
case 106: case 107:
this.$ = new Expr.Literal(treeID++, 'BOOLEAN', $$[$0])
break;
case 108:
this.$ = new Expr.Literal(treeID++, 'NULL', $$[$0])
break;
case 109: case 110: case 111: case 113: case 114:
this.$ = $$[$0].toUpperCase()
break;
case 112:
this.$ = 'STRING'
break;
case 115:
this.$ = $$[$0].toLowerCase()
break;
case 116:
this.$ = $$[$0].slice(1,-1)
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V1,31:$V2,36:$V3,45:$V4,50:$V5,53:$V6,57:$V7,62:$V8,89:$V9,91:$Va,92:$Vb},{1:[3]},{5:[1,28],6:29,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V1,31:$V2,36:$V3,45:$V4,50:$V5,53:$V6,57:$V7,62:$V8,89:$V9,91:$Va,92:$Vb},{7:[1,30]},{7:[2,4]},{7:[2,5]},{7:[2,6]},{12:31,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{46:[1,49]},{46:[1,50]},{46:[1,51]},{12:54,32:36,34:$Vc,40:$Vd,47:$Ve,63:53,64:[1,52],69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{58:[1,55]},{32:56,104:$Vn},{65:[1,57]},{46:[1,58]},{6:66,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V1,23:59,25:60,26:61,27:62,28:63,29:$Vp,30:$Vq,31:$V2,36:$V3,37:$Vr,43:$Vs,45:$V4,50:$V5,53:$V6,57:$V7,62:$V8,89:$V9,91:$Va,92:$Vb},{32:69,104:$Vn},{12:70,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{1:[2,1]},{7:[1,71]},o($Vt,[2,3]),{7:[2,7],44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{12:85,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:86,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:87,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{32:88,104:$Vn},o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o([7,22,33,39,43,44,47,49,52,53,55,56,64,65,68,70,72,74,77,78,79,80,81,82,83,84,85,98,99,100,101,102,103],[2,115]),{47:[1,89]},o($VH,[2,102]),o($VH,[2,103]),o($VH,[2,104]),o($VH,[2,105]),o($VH,[2,106]),o($VH,[2,107]),o($VH,[2,108]),o($VH,[2,116]),{32:90,104:$Vn},{32:91,104:$Vn},{32:92,104:$Vn},{65:[1,93]},{7:[2,47],39:[1,95],65:[1,94]},o($VI,$VJ,{67:96,44:$Vu,64:$Vv,68:$VK,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),{32:98,104:$Vn},{43:[1,99]},{32:100,104:$Vn},{32:101,104:$Vn},{6:66,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V1,24:[1,102],25:103,26:61,27:62,28:63,29:$Vp,30:$Vq,31:$V2,36:$V3,37:$Vr,43:$Vs,45:$V4,50:$V5,53:$V6,57:$V7,62:$V8,89:$V9,91:$Va,92:$Vb},{7:[1,104]},{7:[2,20]},{7:[2,21]},{7:[2,22]},{7:[2,23]},{7:[2,24]},{7:[2,25]},{38:105,40:[1,106]},{40:[1,107]},{33:[1,108]},{19:109,22:$V1,44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($Vt,[2,2]),{12:110,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:111,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:112,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:113,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:114,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:115,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:116,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:117,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:118,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:119,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:120,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:121,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{12:122,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},o($VH,[2,95]),o($VL,[2,96],{44:$Vu,64:$Vv,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),{44:$Vu,49:[1,123],64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},o($VH,[2,98]),{12:124,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{47:[1,125]},{51:126,52:[1,127],53:[1,128],55:[1,129]},{7:[2,41]},{32:130,104:$Vn},{32:131,104:$Vn},{12:132,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},o($VI,[2,51]),{32:133,69:134,104:$Vn,105:$Vo},{47:[1,135]},{32:137,90:136,104:$Vn},{7:$VM,66:138,70:$VN},{7:[2,80]},{7:[2,17]},{7:[1,140]},o($VO,[2,19]),{7:[2,28],39:[1,141]},{32:142,104:$Vn},{32:143,104:$Vn},{34:[1,144]},{7:[2,27]},o($VP,[2,82],{64:$Vv,84:$VF,85:$VG}),o($VP,[2,83],{64:$Vv,84:$VF,85:$VG}),o($VH,[2,84]),o($VH,[2,85]),o($VH,[2,86]),o($VQ,[2,87],{64:$Vv,82:$VD,83:$VE,84:$VF,85:$VG}),o($VQ,[2,88],{64:$Vv,82:$VD,83:$VE,84:$VF,85:$VG}),o($VQ,[2,89],{64:$Vv,82:$VD,83:$VE,84:$VF,85:$VG}),o($VQ,[2,90],{64:$Vv,82:$VD,83:$VE,84:$VF,85:$VG}),o($VQ,[2,91],{64:$Vv,82:$VD,83:$VE,84:$VF,85:$VG}),o($VQ,[2,92],{64:$Vv,82:$VD,83:$VE,84:$VF,85:$VG}),o($VL,[2,93],{44:$Vu,64:$Vv,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o([7,22,39,49,65,68,70,74],[2,94],{44:$Vu,64:$Vv,72:$Vw,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VH,[2,97]),{44:$Vu,64:$Vv,68:[1,145],72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{32:147,48:146,104:$Vn},{7:[2,36]},{32:148,104:$Vn},{54:[1,149]},{54:[1,151],56:[1,150]},{7:$VM,66:152,70:$VN},{7:$VM,66:153,70:$VN},o($VI,$VJ,{67:154,44:$Vu,64:$Vv,68:$VK,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VI,[2,52]),o($VI,[2,53]),{32:156,59:155,104:$Vn},{7:$VM,39:[1,158],66:157,70:$VN},{44:[1,159]},{7:[2,81]},{32:163,71:160,73:161,75:162,104:$Vn},o($VO,[2,18]),{40:[1,164]},{41:165,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW},{44:[1,172]},{35:[1,173]},{41:174,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW},{39:[1,176],49:[1,175]},{41:177,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW},{41:178,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW},{32:179,104:$Vn},{32:180,104:$Vn},{32:181,104:$Vn},{7:[2,48]},{7:[2,49]},o($VI,[2,50]),{39:[1,183],49:[1,182]},o($VX,[2,44]),{7:[2,77]},{32:184,104:$Vn},{12:185,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{7:[2,55],72:[1,186],74:[1,187]},o($VY,[2,59]),{44:[1,188],77:[1,189],78:[1,190],79:[1,191],80:[1,192],81:[1,193]},o([44,77,78,79,80,81],[2,66]),{32:194,104:$Vn},o($VZ,[2,30],{42:[1,195]}),o($V_,[2,109]),o($V_,[2,110]),o($V_,[2,111]),o($V_,[2,112]),o($V_,[2,113]),o($V_,[2,114]),{12:196,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{34:[1,197]},{49:[1,198]},{7:[2,33]},{32:199,104:$Vn},o($VX,[2,35]),{7:[2,37]},{7:[2,38]},{7:[2,39]},{56:[1,200]},{60:[1,201]},{32:202,104:$Vn},{44:[1,203]},o($V$,[2,79],{44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),{32:163,73:204,75:162,104:$Vn},{32:163,73:205,75:162,104:$Vn},{34:$Vc,40:$V01,47:$V11,69:44,76:206,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:211,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:212,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:213,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:214,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:215,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{41:216,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW},{12:217,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},{7:[2,32],44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{19:218,22:$V1},o($VH,[2,76]),{41:219,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW},{32:220,104:$Vn},{47:[1,221]},o($VX,[2,43]),{12:222,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},o($VY,[2,57]),o($VY,[2,58]),o($VY,[2,60],{64:$V31,82:$V41,83:$V51,84:$V61,85:$V71}),{34:$Vc,40:$V01,47:$V11,69:44,76:228,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:229,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{32:230,104:$Vn},o($V81,[2,75]),o($VY,[2,61],{64:$V31,82:$V41,83:$V51,84:$V61,85:$V71}),o($VY,[2,62],{64:$V31,82:$V41,83:$V51,84:$V61,85:$V71}),o($VY,[2,63],{64:$V31,82:$V41,83:$V51,84:$V61,85:$V71}),o($VY,[2,64],{64:$V31,82:$V41,83:$V51,84:$V61,85:$V71}),o($VY,[2,65],{64:$V31,82:$V41,83:$V51,84:$V61,85:$V71}),o($VZ,[2,29]),{7:[2,31],44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG},{7:[2,26]},o($VX,[2,34]),{7:[2,40]},{12:232,32:36,34:$Vc,40:$Vd,47:$Ve,61:231,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},o($V$,[2,78],{44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),{34:$Vc,40:$V01,47:$V11,69:44,76:233,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:234,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:235,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:236,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},{34:$Vc,40:$V01,47:$V11,69:44,76:237,83:$V21,86:210,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,105:$Vo},o($V81,[2,72]),{49:[1,238],64:$V31,82:$V41,83:$V51,84:$V61,85:$V71},o($V81,[2,74]),{39:[1,240],49:[1,239]},o($VX,[2,46],{44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($V91,[2,67],{64:$V31,84:$V61,85:$V71}),o($V91,[2,68],{64:$V31,84:$V61,85:$V71}),o($V81,[2,69]),o($V81,[2,70]),o($V81,[2,71]),o($V81,[2,73]),{7:[2,42]},{12:241,32:36,34:$Vc,40:$Vd,47:$Ve,69:44,83:$Vf,86:38,87:37,88:$Vg,93:$Vh,94:$Vi,95:$Vj,96:$Vk,97:$Vl,98:$Vm,104:$Vn,105:$Vo},o($VX,[2,45],{44:$Vu,64:$Vv,72:$Vw,74:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG})],
defaultActions: {4:[2,4],5:[2,5],6:[2,6],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],28:[2,1],61:[2,20],62:[2,21],63:[2,22],64:[2,23],65:[2,24],66:[2,25],92:[2,41],101:[2,80],102:[2,17],109:[2,27],126:[2,36],138:[2,81],152:[2,48],153:[2,49],157:[2,77],175:[2,33],178:[2,37],179:[2,38],180:[2,39],218:[2,26],220:[2,40],239:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Expr = require('../interpreter/Expression.cjs');
const Stmt = require('../interpreter/Statement.cjs');
var treeID = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* no hacer nada */
break;
case 1:/* no hacer nada */
break;
case 2:this.pushState('comment');
break;
case 3:this.popState();
break;
case 4:/* no hacer nada */
break;
case 5:/* no hacer nada */
break;
case 6:return 96
break;
case 7:return 97
break;
case 8:return 37
break;
case 9:return 42
break;
case 10:return 43
break;
case 11:return 45
break;
case 12:return 46
break;
case 13:return 50
break;
case 14:return 46
break;
case 15:return 52
break;
case 16:return 53
break;
case 17:return 55
break;
case 18:return 54
break;
case 19:return 56
break;
case 20:return 72
break;
case 21:return 74
break;
case 22:return 93
break;
case 23:return 99
break;
case 24:return 100
break;
case 25:return 101
break;
case 26:return 102
break;
case 27:return 103
break;
case 28:return 98
break;
case 29:return 11
break;
case 30:return 57
break;
case 31:return 58
break;
case 32:return 60
break;
case 33:return 62
break;
case 34:return 65
break;
case 35:return 70
break;
case 36:return 68
break;
case 37:return 89
break;
case 38:return 91
break;
case 39:return 92
break;
case 40:return 88
break;
case 41:return 22
break;
case 42:return 24
break;
case 43:return 31
break;
case 44:return 33
break;
case 45:return 36
break;
case 46:return 29
break;
case 47:return 30
break;
case 48:return 35
break;
case 49:return 7
break;
case 50:return 40
break;
case 51:return 39
break;
case 52:return 47
break;
case 53:return 49
break;
case 54:return 82
break;
case 55:return 83
break;
case 56:return 64
break;
case 57:return 84
break;
case 58:return 85
break;
case 59:return 44
break;
case 60:return 80
break;
case 61:return 81
break;
case 62:return 78
break;
case 63:return 79
break;
case 64:return 77
break;
case 65:return 95
break;
case 66:return 94
break;
case 67:return 34
break;
case 68:return 105
break;
case 69:return 104
break;
case 70:return 5
break;
case 71:return 'INVALID'
break;
case 72:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:--.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:[^\n]+)/i,/^(?:\n)/i,/^(?:true)/i,/^(?:false)/i,/^(?:declare)/i,/^(?:default)/i,/^(?:set)/i,/^(?:create)/i,/^(?:table)/i,/^(?:alter)/i,/^(?:table)/i,/^(?:add)/i,/^(?:drop)/i,/^(?:rename)/i,/^(?:column)/i,/^(?:to)/i,/^(?:and)/i,/^(?:or)/i,/^(?:not)/i,/^(?:int)/i,/^(?:double)/i,/^(?:date)/i,/^(?:varchar)/i,/^(?:boolean)/i,/^(?:null)/i,/^(?:print)/i,/^(?:insert)/i,/^(?:into)/i,/^(?:values)/i,/^(?:select)/i,/^(?:from)/i,/^(?:where)/i,/^(?:as)/i,/^(?:update)/i,/^(?:truncate)/i,/^(?:delete)/i,/^(?:cast)/i,/^(?:begin)/i,/^(?:end)/i,/^(?:for)/i,/^(?:in)/i,/^(?:while)/i,/^(?:break)/i,/^(?:continue)/i,/^(?:\.\.)/i,/^(?:;)/i,/^(?:@)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:(19|20)\d\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01]))/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"(\\.|[^"\\])*")/i,/^(?:[a-z][a-z0-9_-]*)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[3,4,5],"inclusive":false},"INITIAL":{"rules":[0,1,2,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
/*
    Regex para string con caracteres de escape
    - https://stackoverflow.com/questions/2039795/regular-expression-for-a-string-literal-in-flex-lex

    Regex para comentario multilinea
    - https://westes.github.io/flex/manual/How-can-I-match-C_002dstyle-comments_003f.html
    - https://gerhobbelt.github.io/jison/docs/#lexical-analysis

    Regex para fecha
    - https://www.regular-expressions.info/dates.html
*/;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = query_parser;
exports.Parser = query_parser.Parser;
exports.parse = function () { return query_parser.parse.apply(query_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}