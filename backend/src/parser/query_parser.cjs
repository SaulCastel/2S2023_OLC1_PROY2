/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var query_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,22],$V2=[1,35],$V3=[1,32],$V4=[1,30],$V5=[1,31],$V6=[1,33],$V7=[1,34],$V8=[1,23],$V9=[1,24],$Va=[1,26],$Vb=[1,25],$Vc=[1,29],$Vd=[1,27],$Ve=[1,28],$Vf=[1,42],$Vg=[1,43],$Vh=[1,56],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,40],$Vq=[1,41],$Vr=[1,57],$Vs=[1,58],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,48],$Vx=[1,63],$Vy=[1,79],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,89],$VD=[1,90],$VE=[5,11,27,35,42,52,56,60,65,73,76,80,84,98,101,103],$VF=[1,102],$VG=[1,99],$VH=[1,97],$VI=[1,98],$VJ=[1,100],$VK=[1,101],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[1,107],$VQ=[1,108],$VR=[1,109],$VS=[7,32,38,39,42,44,53,55,59,70,86,87,90,104,105,106,107,108,109,110,111,112,113,114],$VT=[7,39,87],$VU=[2,78],$VV=[1,131],$VW=[1,139],$VX=[7,32,38,39,42,44,53,55,59,87,90,113,114],$VY=[1,179],$VZ=[2,80],$V_=[1,194],$V$=[11,27,35,42,44,49,50,51,52,55,56,60,65,66,69,73,76,80,84,98,101,103],$V01=[7,32,38,39,42,44,53,55,59,70,87,90,104,105,108,109,110,111,112,113,114],$V11=[7,32,38,39,42,44,53,55,59,70,87,90,108,109,110,111,112,113,114],$V21=[1,208],$V31=[32,39],$V41=[2,90],$V51=[1,213],$V61=[1,220],$V71=[32,38,39],$V81=[1,250],$V91=[1,245],$Va1=[1,246],$Vb1=[1,247],$Vc1=[1,248],$Vd1=[1,249],$Ve1=[55,59],$Vf1=[7,39],$Vg1=[7,32,38,39,42,68],$Vh1=[7,39,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"querys":3,"stmts":4,"EOF":5,"stmt":6,";":7,"create_table":8,"alter_table":9,"drop_table":10,"PRINT":11,"expr":12,"select_from":13,"select_print":14,"insert_into":15,"update":16,"delete_from":17,"truncate":18,"if_stmt":19,"case_stmt":20,"block_stmt":21,"for_stmt":22,"while_stmt":23,"create_proc":24,"call_proc":25,"create_func":26,"CREATE":27,"FUNCTION":28,"identifier":29,"(":30,"parameters":31,")":32,"RETURNS":33,"type":34,"CALL":35,"value_list":36,"PROCEDURE":37,"AS":38,",":39,"parameter":40,"@":41,"BEGIN":42,"extended_stmts":43,"END":44,"extended_stmt":45,"var_declaration":46,"var_default":47,"var_assignment":48,"BREAK":49,"CONTINUE":50,"RETURN":51,"IF":52,"THEN":53,"else_stmt":54,"ELSE":55,"CASE":56,"cases":57,"asign_alias":58,"WHEN":59,"FOR":60,"for_iterator":61,"IN":62,"INT_LITERAL":63,"..":64,"WHILE":65,"DECLARE":66,"var_list":67,"DEFAULT":68,"SET":69,"=":70,"TABLE":71,"col_declaration":72,"ALTER":73,"alter_action":74,"ADD":75,"DROP":76,"COLUMN":77,"RENAME":78,"TO":79,"INSERT":80,"INTO":81,"column_list":82,"VALUES":83,"SELECT":84,"selection":85,"*":86,"FROM":87,"where":88,"string_literal":89,"WHERE":90,"native_func":91,"CAST":92,"LOWER":93,"UPPER":94,"ROUND":95,"option":96,"LEN":97,"TRUNCATE":98,"TYPEOF":99,"function_call":100,"UPDATE":101,"update_list":102,"DELETE":103,"+":104,"-":105,"/":106,"%":107,"!=":108,"<":109,"<=":110,">":111,">=":112,"AND":113,"OR":114,"NOT":115,"literal":116,"DOUBLE_LITERAL":117,"DATE_LITERAL":118,"TRUE":119,"FALSE":120,"NULL":121,"INT":122,"DOUBLE":123,"DATE":124,"VARCHAR":125,"BOOLEAN":126,"ID":127,"STRING_LITERAL":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",11:"PRINT",27:"CREATE",28:"FUNCTION",30:"(",32:")",33:"RETURNS",35:"CALL",37:"PROCEDURE",38:"AS",39:",",41:"@",42:"BEGIN",44:"END",49:"BREAK",50:"CONTINUE",51:"RETURN",52:"IF",53:"THEN",55:"ELSE",56:"CASE",59:"WHEN",60:"FOR",62:"IN",63:"INT_LITERAL",64:"..",65:"WHILE",66:"DECLARE",68:"DEFAULT",69:"SET",70:"=",71:"TABLE",73:"ALTER",75:"ADD",76:"DROP",77:"COLUMN",78:"RENAME",79:"TO",80:"INSERT",81:"INTO",83:"VALUES",84:"SELECT",86:"*",87:"FROM",90:"WHERE",92:"CAST",93:"LOWER",94:"UPPER",95:"ROUND",97:"LEN",98:"TRUNCATE",99:"TYPEOF",101:"UPDATE",103:"DELETE",104:"+",105:"-",106:"/",107:"%",108:"!=",109:"<",110:"<=",111:">",112:">=",113:"AND",114:"OR",115:"NOT",117:"DOUBLE_LITERAL",118:"DATE_LITERAL",119:"TRUE",120:"FALSE",121:"NULL",122:"INT",123:"DOUBLE",124:"DATE",125:"VARCHAR",126:"BOOLEAN",127:"ID",128:"STRING_LITERAL"},
productions_: [0,[3,2],[4,3],[4,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[26,9],[25,5],[25,4],[24,6],[24,5],[31,3],[31,1],[40,3],[21,3],[43,3],[43,2],[45,1],[45,1],[45,1],[45,1],[45,1],[45,2],[45,1],[45,1],[19,7],[54,2],[54,0],[20,7],[20,6],[57,5],[57,4],[22,7],[61,1],[61,2],[23,3],[46,2],[67,5],[67,3],[47,6],[48,5],[8,6],[72,4],[72,2],[9,4],[74,3],[74,3],[74,3],[74,5],[10,3],[15,10],[82,3],[82,1],[36,3],[36,1],[14,2],[13,5],[13,5],[85,4],[85,2],[58,2],[58,2],[58,0],[88,2],[88,0],[91,6],[91,4],[91,4],[91,5],[91,4],[91,5],[91,4],[100,4],[96,2],[96,0],[16,5],[102,5],[102,3],[18,3],[17,4],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,3],[12,2],[12,1],[12,1],[12,1],[12,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[29,1],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        treeID = 0
        this.$ = $$[$0-1]
        return this.$
    
break;
case 2:

        $$[$0-2].push($$[$0-1])
        this.$ = $$[$0-2]
    
break;
case 3: case 32:

        this.$ = []
        this.$.push($$[$0-1])
    
break;
case 7:
this.$ = new Stmt.Print(treeID++, $$[$0])
break;
case 22:
this.$ = new Stmt.CreateFunc(treeID++, $$[$0-6], $$[$0-4], $$[$0-1], $$[$0])
break;
case 23:
this.$ = new Stmt.Call(treeID++, $$[$0-3], $$[$0-1])
break;
case 24:
this.$ = new Stmt.Call(treeID++, $$[$0-2])
break;
case 25:
this.$ = new Stmt.CreateProc(treeID++, $$[$0-3], $$[$0], $$[$0-2])
break;
case 26:
this.$ = new Stmt.CreateProc(treeID++, $$[$0-2], $$[$0])
break;
case 27: case 67: case 69:

        this.$ = $$[$0-2]
        this.$.push($$[$0])
    
break;
case 28: case 68: case 70:

        this.$ = []
        this.$.push($$[$0])
    
break;
case 29:
this.$ = [$$[$0-1], $$[$0]]
break;
case 30:
this.$ = new Stmt.Block(treeID++, $$[$0-1])
break;
case 31:

        this.$ = $$[$0-2]
        this.$.push($$[$0-1])
    
break;
case 36:
this.$ = new Stmt.Break(treeID++)
break;
case 37:
this.$ = new Stmt.Continue(treeID++)
break;
case 38:
this.$ = new Stmt.Return(treeID++, $$[$0])
break;
case 39:
this.$ = new Stmt.Return(treeID++, new Literal(treeID++, 'NULL', null))
break;
case 41:
this.$ = new Stmt.If(treeID++, $$[$0-5], $$[$0-3], $$[$0-2])
break;
case 42:
this.$ = new Stmt.Else(treeID++, $$[$0])
break;
case 44:
this.$ = new Stmt.SimpleCase(treeID++, $$[$0-5], $$[$0-4], $$[$0-2], $$[$0])
break;
case 45:
this.$ = new Stmt.ConditionalCase(treeID++, $$[$0-4], $$[$0-2], $$[$0])
break;
case 46: case 92:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 47: case 93:

        this.$ = []
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 48:
this.$ = new Stmt.For(treeID++, $$[$0-5], $$[$0-3], $$[$0-1], $$[$0])
break;
case 50: case 76: case 77: case 79: case 89:
this.$ = $$[$0]
break;
case 51:
this.$ = new Stmt.While(treeID++, $$[$0-1], $$[$0])
break;
case 52:
this.$ = new Stmt.Declare(treeID++, $$[$0])
break;
case 53:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 54: case 59: case 75:

        this.$ = []
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 55:
this.$ = new Stmt.DeclareDefault(treeID++, $$[$0-3], $$[$0-2], $$[$0])
break;
case 56:
this.$ = new Stmt.Set(treeID++, $$[$0-2], $$[$0])
break;
case 57:
this.$ = new Stmt.CreateTable(treeID++, $$[$0-3], $$[$0-1])
break;
case 58: case 74:

        this.$ = $$[$0-3]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 60:
this.$ = new Stmt.AlterTable(treeID++, $$[$0-1], $$[$0])
break;
case 61:
this.$ = ['ADD', $$[$0-1], $$[$0]]
break;
case 62:
this.$ = ['DROP', $$[$0]]
break;
case 63:
this.$ = ['RENAME', $$[$0]]
break;
case 64:
this.$ = ['RENAME_C', $$[$0-2], $$[$0]]
break;
case 65:
this.$ = new Stmt.DropTable(treeID++, $$[$0])
break;
case 66:
this.$ = new Stmt.InsertInto(treeID++, $$[$0-7], $$[$0-5], $$[$0-1])
break;
case 71:
this.$ = new Stmt.Select(treeID++, $$[$0])
break;
case 72: case 73:
this.$ = new Stmt.SelectFrom(treeID++, $$[$0-1], $$[$0-3], $$[$0])
break;
case 81:
this.$ = new Expr.Cast(treeID++, $$[$0-3], $$[$0-1])
break;
case 82:
this.$ = new Expr.Lower(treeID++, $$[$0-1])
break;
case 83:
this.$ = new Expr.Upper(treeID++, $$[$0-1])
break;
case 84:
this.$ = new Expr.Round(treeID++, $$[$0-2], $$[$0-1])
break;
case 85:
this.$ = new Expr.Len(treeID++, $$[$0-1])
break;
case 86:
this.$ = new Expr.Truncate(treeID++, $$[$0-2], $$[$0-1])
break;
case 87:
this.$ = new Expr.TypeOf(treeID++, $$[$0-1])
break;
case 88:
this.$ = new Expr.FunctionCall(treeID++, $$[$0-3], $$[$0-1])
break;
case 91:
this.$ = new Stmt.UpdateTable(treeID++, $$[$0-3], $$[$0-1], $$[$0])
break;
case 94:
this.$ = new Stmt.TruncateTable(treeID++, $$[$0])
break;
case 95:
this.$ = new Stmt.DeleteFrom(treeID++, $$[$0-1], $$[$0])
break;
case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106:
this.$ = new Expr.Binary(treeID++, $$[$0-2], $$[$0-1], $$[$0])
break;
case 107:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'AND', $$[$0])
break;
case 108:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'OR', $$[$0])
break;
case 109:
this.$ = new Expr.Unary(treeID++, $$[$0-1], $$[$0])
break;
case 110:
this.$ = new Expr.Unary(treeID++, 'NOT', $$[$0])
break;
case 111:
this.$ = new Expr.Group(treeID++, $$[$0-1])
break;
case 112:
this.$ = new Expr.Variable(treeID++, $$[$0])
break;
case 113:
this.$ = new Expr.Identifier(treeID++, $$[$0])
break;
case 117:
this.$ = new Literal(treeID++, 'INT', $$[$0])
break;
case 118:
this.$ = new Literal(treeID++, 'DOUBLE', $$[$0])
break;
case 119:
this.$ = new Literal(treeID++, 'DATE', $$[$0])
break;
case 120:
this.$ = new Literal(treeID++, 'STRING', $$[$0])
break;
case 121: case 122:
this.$ = new Literal(treeID++, 'BOOLEAN', $$[$0])
break;
case 123:
this.$ = new Literal(treeID++, 'NULL', $$[$0])
break;
case 124: case 125: case 126: case 128: case 129:
this.$ = $$[$0].toUpperCase()
break;
case 127:
this.$ = 'STRING'
break;
case 130:
this.$ = $$[$0].toLowerCase()
break;
case 131:
this.$ = $$[$0].slice(1,-1)
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,52:$V4,56:$V5,60:$V6,65:$V7,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{1:[3]},{5:[1,36],6:37,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,52:$V4,56:$V5,60:$V6,65:$V7,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{7:[1,38]},{7:[2,4]},{7:[2,5]},{7:[2,6]},{12:39,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{7:[2,17]},{7:[2,18]},{7:[2,19]},{7:[2,20]},{7:[2,21]},{28:[1,66],37:[1,65],71:[1,64]},{71:[1,67]},{71:[1,68]},{12:71,29:44,30:$Vf,41:$Vg,63:$Vh,85:70,86:[1,69],89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{81:[1,72]},{29:73,127:$Vw},{87:[1,74]},{71:[1,75]},{12:76,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:77,29:44,30:$Vf,41:$Vg,57:78,59:$Vy,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{6:88,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,43:80,45:81,46:82,47:83,48:84,49:$Vz,50:$VA,51:$VB,52:$V4,56:$V5,60:$V6,65:$V7,66:$VC,69:$VD,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{29:92,41:[1,93],61:91,127:$Vw},{12:94,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{29:95,127:$Vw},{1:[2,1]},{7:[1,96]},o($VE,[2,3]),{7:[2,7],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{12:110,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:111,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:112,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{29:113,127:$Vw},o($VS,[2,113],{30:[1,114]}),o($VS,[2,114]),o($VS,[2,115]),o($VS,[2,116]),o([7,30,32,38,39,41,42,44,53,55,59,62,69,70,75,76,78,79,86,87,90,104,105,106,107,108,109,110,111,112,113,114,121,122,123,124,125,126],[2,130]),{30:[1,115]},{30:[1,116]},{30:[1,117]},{30:[1,118]},{30:[1,119]},{30:[1,120]},{30:[1,121]},o($VS,[2,117]),o($VS,[2,118]),o($VS,[2,119]),o($VS,[2,120]),o($VS,[2,121]),o($VS,[2,122]),o($VS,[2,123]),o($VS,[2,131]),{29:122,127:$Vw},{29:123,127:$Vw},{29:124,127:$Vw},{29:125,127:$Vw},{29:126,127:$Vw},{87:[1,127]},{7:[2,71],39:[1,129],87:[1,128]},o($VT,$VU,{58:130,38:$VV,70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),{29:132,127:$Vw},{69:[1,133]},{29:134,127:$Vw},{29:135,127:$Vw},{53:[1,136],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{57:137,59:$Vy,70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{55:[1,138],59:$VW},{12:140,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{6:88,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,44:[1,141],45:142,46:82,47:83,48:84,49:$Vz,50:$VA,51:$VB,52:$V4,56:$V5,60:$V6,65:$V7,66:$VC,69:$VD,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{7:[1,143]},{7:[2,33]},{7:[2,34]},{7:[2,35]},{7:[2,36]},{7:[2,37]},{7:[2,39],12:144,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{7:[2,40]},{41:[1,146],67:145},{41:[1,147]},{62:[1,148]},{62:[2,49]},{29:149,127:$Vw},{21:150,42:$V3,70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{30:[1,151]},o($VE,[2,2]),{12:152,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:153,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:154,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:155,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:156,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:157,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:158,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:159,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:160,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:161,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:162,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:163,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:164,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},o($VS,[2,109]),o($VX,[2,110],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP}),{32:[1,165],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},o($VS,[2,112]),{12:167,29:44,30:$Vf,36:166,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:168,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:169,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:170,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:171,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:172,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:173,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:174,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{30:[1,175]},{31:176,38:[1,177],40:178,41:$VY},{30:[1,180]},{74:181,75:[1,182],76:[1,183],78:[1,184]},{7:[2,65]},{29:185,127:$Vw},{29:186,127:$Vw},{12:187,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},o($VT,[2,75]),{29:188,89:189,127:$Vw,128:$Vx},{30:[1,190]},{29:192,102:191,127:$Vw},{7:$VZ,88:193,90:$V_},{7:[2,94]},{6:88,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,43:195,45:81,46:82,47:83,48:84,49:$Vz,50:$VA,51:$VB,52:$V4,56:$V5,60:$V6,65:$V7,66:$VC,69:$VD,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{55:[1,196],59:$VW},{12:197,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{12:198,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{53:[1,199],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{7:[2,30]},{7:[1,200]},o($V$,[2,32]),{7:[2,38],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{7:[2,52],39:[1,201]},{29:202,127:$Vw},{29:203,127:$Vw},{63:[1,204]},{62:[2,50]},{7:[2,51]},{12:167,29:44,30:$Vf,32:[1,206],36:205,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},o($V01,[2,96],{86:$VG,106:$VJ,107:$VK}),o($V01,[2,97],{86:$VG,106:$VJ,107:$VK}),o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),o($V11,[2,101],{86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK}),o($V11,[2,102],{86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK}),o($V11,[2,103],{86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK}),o($V11,[2,104],{86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK}),o($V11,[2,105],{86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK}),o($V11,[2,106],{86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK}),o($VX,[2,107],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP}),o([7,32,38,39,42,44,53,55,59,87,90,114],[2,108],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ}),o($VS,[2,111]),{32:[1,207],39:$V21},o($V31,[2,70],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),{38:[1,209],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{32:[1,210],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{32:[1,211],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{32:$V41,39:$V51,70:$VF,86:$VG,96:212,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{32:[1,214],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{32:$V41,39:$V51,70:$VF,86:$VG,96:215,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{32:[1,216],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{29:218,72:217,127:$Vw},{38:[1,219],39:$V61},{21:221,42:$V3},o($V71,[2,28]),{29:222,127:$Vw},{31:223,40:178,41:$VY},{7:[2,60]},{29:224,127:$Vw},{77:[1,225]},{77:[1,227],79:[1,226]},{7:$VZ,88:228,90:$V_},{7:$VZ,88:229,90:$V_},o($VT,$VU,{58:230,38:$VV,70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),o($VT,[2,76]),o($VT,[2,77]),{29:232,82:231,127:$Vw},{7:$VZ,39:[1,234],88:233,90:$V_},{70:[1,235]},{7:[2,95]},{12:236,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{6:88,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,44:[2,43],45:142,46:82,47:83,48:84,49:$Vz,50:$VA,51:$VB,52:$V4,54:237,55:[1,238],56:$V5,60:$V6,65:$V7,66:$VC,69:$VD,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{12:239,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{44:[1,240],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{53:[1,241],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{12:242,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},o($V$,[2,31]),{41:[1,243]},{34:244,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},{70:[1,251]},{64:[1,252]},{32:[1,253],39:$V21},{7:[2,24]},o($VS,[2,88]),{12:254,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{34:255,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},o($VS,[2,82]),o($VS,[2,83]),{32:[1,256]},{12:257,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},o($VS,[2,85]),{32:[1,258]},o($VS,[2,87]),{32:[1,259],39:[1,260]},{34:261,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},{21:262,42:$V3},{40:263,41:$VY},{7:[2,26]},{34:264,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},{32:[1,265],39:$V61},{34:266,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},{29:267,127:$Vw},{29:268,127:$Vw},{29:269,127:$Vw},{7:[2,72]},{7:[2,73]},o($VT,[2,74]),{32:[1,270],39:[1,271]},o($V31,[2,68]),{7:[2,91]},{29:272,127:$Vw},{12:273,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{7:[2,79],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{44:[1,274]},{6:88,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,43:275,45:81,46:82,47:83,48:84,49:$Vz,50:$VA,51:$VB,52:$V4,56:$V5,60:$V6,65:$V7,66:$VC,69:$VD,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{44:[1,276],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{7:$VU,38:$VV,58:277},{12:278,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},o($Ve1,[2,47],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),{29:279,127:$Vw},o($Vf1,[2,54],{68:[1,280]}),o($Vg1,[2,124]),o($Vg1,[2,125]),o($Vg1,[2,126]),o($Vg1,[2,127]),o($Vg1,[2,128]),o($Vg1,[2,129]),{12:281,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{63:[1,282]},{7:[2,23]},o($V31,[2,69],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),{32:[1,283]},o($VS,[2,84]),{32:[2,89],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},o($VS,[2,86]),{7:[2,57]},{29:284,127:$Vw},o($V31,[2,59]),{7:[2,25]},o($V71,[2,27]),o($V71,[2,29]),{33:[1,285]},{7:[2,61]},{7:[2,62]},{7:[2,63]},{79:[1,286]},{83:[1,287]},{29:288,127:$Vw},{70:[1,289]},o($Vh1,[2,93],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),{52:[1,290]},{6:88,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:$V1,35:$V2,42:$V3,44:[2,42],45:142,46:82,47:83,48:84,49:$Vz,50:$VA,51:$VB,52:$V4,56:$V5,60:$V6,65:$V7,66:$VC,69:$VD,73:$V8,76:$V9,80:$Va,84:$Vb,98:$Vc,101:$Vd,103:$Ve},{7:$VU,38:$VV,58:291},{7:[2,45]},o($Ve1,[2,46],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),{34:292,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},{12:293,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{7:[2,56],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{21:294,42:$V3},o($VS,[2,81]),{34:295,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},{34:296,121:$V81,122:$V91,123:$Va1,124:$Vb1,125:$Vc1,126:$Vd1},{29:297,127:$Vw},{30:[1,298]},o($V31,[2,67]),{12:299,29:44,30:$Vf,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},{7:[2,41]},{7:[2,44]},o($Vf1,[2,53]),{7:[2,55],70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR},{7:[2,48]},o($V31,[2,58]),{21:300,42:$V3},{7:[2,64]},{12:167,29:44,30:$Vf,36:301,41:$Vg,63:$Vh,89:59,91:45,92:$Vi,93:$Vj,94:$Vk,95:$Vl,97:$Vm,98:$Vn,99:$Vo,100:46,105:$Vp,115:$Vq,116:47,117:$Vr,118:$Vs,119:$Vt,120:$Vu,121:$Vv,127:$Vw,128:$Vx},o($Vh1,[2,92],{70:$VF,86:$VG,104:$VH,105:$VI,106:$VJ,107:$VK,108:$VL,109:$VM,110:$VN,111:$VO,112:$VP,113:$VQ,114:$VR}),{7:[2,22]},{32:[1,302],39:$V21},{7:[2,66]}],
defaultActions: {4:[2,4],5:[2,5],6:[2,6],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],17:[2,17],18:[2,18],19:[2,19],20:[2,20],21:[2,21],36:[2,1],82:[2,33],83:[2,34],84:[2,35],85:[2,36],86:[2,37],88:[2,40],92:[2,49],126:[2,65],135:[2,94],141:[2,30],149:[2,50],150:[2,51],181:[2,60],193:[2,95],206:[2,24],221:[2,26],228:[2,72],229:[2,73],233:[2,91],253:[2,23],259:[2,57],262:[2,25],266:[2,61],267:[2,62],268:[2,63],277:[2,45],290:[2,41],291:[2,44],294:[2,48],297:[2,64],300:[2,22],302:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Expr = require('../interpreter/Expression.cjs');
const Stmt = require('../interpreter/Statement.cjs');
const Literal = require('../interpreter/Literal.cjs');
var treeID = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* no hacer nada */
break;
case 1:/* no hacer nada */
break;
case 2:this.pushState('comment');
break;
case 3:/* no hacer nada */
break;
case 4:/* no hacer nada */
break;
case 5:yy_.yylineno++
break;
case 6:this.popState();
break;
case 7:return 119
break;
case 8:return 120
break;
case 9:return 66
break;
case 10:return 68
break;
case 11:return 69
break;
case 12:return 27
break;
case 13:return 71
break;
case 14:return 73
break;
case 15:return 71
break;
case 16:return 75
break;
case 17:return 76
break;
case 18:return 78
break;
case 19:return 77
break;
case 20:return 79
break;
case 21:return 113
break;
case 22:return 114
break;
case 23:return 115
break;
case 24:return 122
break;
case 25:return 123
break;
case 26:return 124
break;
case 27:return 125
break;
case 28:return 126
break;
case 29:return 121
break;
case 30:return 11
break;
case 31:return 80
break;
case 32:return 81
break;
case 33:return 83
break;
case 34:return 84
break;
case 35:return 87
break;
case 36:return 90
break;
case 37:return 38
break;
case 38:return 101
break;
case 39:return 98
break;
case 40:return 103
break;
case 41:return 92
break;
case 42:return 93
break;
case 43:return 94
break;
case 44:return 95
break;
case 45:return 97
break;
case 46:return 99
break;
case 47:return 42
break;
case 48:return 44
break;
case 49:return 60
break;
case 50:return 62
break;
case 51:return 65
break;
case 52:return 49
break;
case 53:return 50
break;
case 54:return 52
break;
case 55:return 53
break;
case 56:return 55
break;
case 57:return 56
break;
case 58:return 59
break;
case 59:return 37
break;
case 60:return 35
break;
case 61:return 28
break;
case 62:return 33
break;
case 63:return 51
break;
case 64:return 64
break;
case 65:return 7
break;
case 66:return 41
break;
case 67:return 39
break;
case 68:return 30
break;
case 69:return 32
break;
case 70:return 104
break;
case 71:return 105
break;
case 72:return 86
break;
case 73:return 106
break;
case 74:return 107
break;
case 75:return 70
break;
case 76:return 111
break;
case 77:return 112
break;
case 78:return 109
break;
case 79:return 110
break;
case 80:return 108
break;
case 81:return 118
break;
case 82:return 117
break;
case 83:return 63
break;
case 84:return 128
break;
case 85:return 127
break;
case 86:return 5
break;
case 87:return 'INVALID'
break;
case 88:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:--.*)/i,/^(?:\/\*)/i,/^(?:[^*\n]+)/i,/^(?:\*)/i,/^(?:\n)/i,/^(?:\*\/)/i,/^(?:true)/i,/^(?:false)/i,/^(?:declare)/i,/^(?:default)/i,/^(?:set)/i,/^(?:create)/i,/^(?:table)/i,/^(?:alter)/i,/^(?:table)/i,/^(?:add)/i,/^(?:drop)/i,/^(?:rename)/i,/^(?:column)/i,/^(?:to)/i,/^(?:and)/i,/^(?:or)/i,/^(?:not)/i,/^(?:int)/i,/^(?:double)/i,/^(?:date)/i,/^(?:varchar)/i,/^(?:boolean)/i,/^(?:null)/i,/^(?:print)/i,/^(?:insert)/i,/^(?:into)/i,/^(?:values)/i,/^(?:select)/i,/^(?:from)/i,/^(?:where)/i,/^(?:as)/i,/^(?:update)/i,/^(?:truncate)/i,/^(?:delete)/i,/^(?:cast)/i,/^(?:lower)/i,/^(?:upper)/i,/^(?:round)/i,/^(?:len)/i,/^(?:typeof)/i,/^(?:begin)/i,/^(?:end)/i,/^(?:for)/i,/^(?:in)/i,/^(?:while)/i,/^(?:break)/i,/^(?:continue)/i,/^(?:if)/i,/^(?:then)/i,/^(?:else)/i,/^(?:case)/i,/^(?:when)/i,/^(?:procedure)/i,/^(?:call)/i,/^(?:function)/i,/^(?:returns)/i,/^(?:return)/i,/^(?:\.\.)/i,/^(?:;)/i,/^(?:@)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:(19|20)\d\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01]))/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"(\\.|[^"\\])*")/i,/^(?:[_a-z][_a-z0-9]*)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[3,4,5,6],"inclusive":false},"INITIAL":{"rules":[0,1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
/*
    Regex para string con caracteres de escape
    - https://stackoverflow.com/questions/2039795/regular-expression-for-a-string-literal-in-flex-lex

    Regex para comentario multilinea
    - https://westes.github.io/flex/manual/How-can-I-match-C_002dstyle-comments_003f.html
    - https://gerhobbelt.github.io/jison/docs/#lexical-analysis

    Regex para fecha
    - https://www.regular-expressions.info/dates.html
*/;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = query_parser;
exports.Parser = query_parser.Parser;
exports.parse = function () { return query_parser.parse.apply(query_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}