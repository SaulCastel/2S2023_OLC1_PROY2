/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var query_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,29],$V2=[1,27],$V3=[1,28],$V4=[1,30],$V5=[1,31],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,23],$Va=[1,22],$Vb=[1,26],$Vc=[1,24],$Vd=[1,25],$Ve=[1,51],$Vf=[1,39],$Vg=[1,38],$Vh=[1,36],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,37],$Vq=[1,52],$Vr=[1,53],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,43],$Vw=[1,58],$Vx=[1,76],$Vy=[1,77],$Vz=[1,79],$VA=[1,80],$VB=[5,11,24,33,37,41,46,55,60,63,67,72,103,105,107],$VC=[1,89],$VD=[1,86],$VE=[1,95],$VF=[1,96],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,84],$VM=[1,85],$VN=[1,87],$VO=[1,88],$VP=[7,24,26,34,36,40,49,54,59,74,75,77,79,81,83,86,87,88,89,90,91,92,93,94],$VQ=[7,49,75],$VR=[2,62],$VS=[1,115],$VT=[7,24,26,34,36,40,49,59,75,77,79,81,83],$VU=[2,64],$VV=[1,166],$VW=[11,24,26,31,32,33,36,37,41,46,47,53,55,60,63,67,72,103,105,107],$VX=[7,24,26,34,36,40,49,54,59,75,77,79,81,83,86,87,88,89,90,91,92],$VY=[7,24,26,34,36,40,49,54,59,75,77,79,81,83,86,87,88,89,90],$VZ=[1,180],$V_=[2,92],$V$=[1,214],$V01=[1,209],$V11=[1,210],$V21=[1,211],$V31=[1,212],$V41=[1,213],$V51=[49,59],$V61=[7,81,83],$V71=[7,49],$V81=[7,49,52,59],$V91=[7,49,79],$Va1=[1,260],$Vb1=[1,259],$Vc1=[1,258],$Vd1=[36,40],$Ve1=[1,279],$Vf1=[1,277],$Vg1=[1,278],$Vh1=[1,280],$Vi1=[1,281],$Vj1=[7,59,74,81,83,91,92,93,94],$Vk1=[7,59,81,83,91,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"querys":3,"stmts":4,"EOF":5,"stmt":6,";":7,"create_table":8,"alter_table":9,"drop_table":10,"PRINT":11,"expr":12,"select_from":13,"select_print":14,"insert_into":15,"update":16,"delete_from":17,"truncate":18,"if_stmt":19,"case_stmt":20,"block_stmt":21,"for_stmt":22,"while_stmt":23,"BEGIN":24,"extended_stmts":25,"END":26,"extended_stmt":27,"var_declaration":28,"var_default":29,"var_assignment":30,"BREAK":31,"CONTINUE":32,"IF":33,"THEN":34,"else_stmt":35,"ELSE":36,"CASE":37,"cases":38,"asign_alias":39,"WHEN":40,"FOR":41,"identifier":42,"IN":43,"INT_LITERAL":44,"..":45,"WHILE":46,"DECLARE":47,"var_list":48,",":49,"@":50,"type":51,"DEFAULT":52,"SET":53,"=":54,"CREATE":55,"TABLE":56,"(":57,"col_declaration":58,")":59,"ALTER":60,"alter_action":61,"ADD":62,"DROP":63,"COLUMN":64,"RENAME":65,"TO":66,"INSERT":67,"INTO":68,"column_list":69,"VALUES":70,"value_list":71,"SELECT":72,"selection":73,"*":74,"FROM":75,"where":76,"AS":77,"string_literal":78,"WHERE":79,"conditions":80,"AND":81,"condition":82,"OR":83,"column_name":84,"cond_expr":85,"!=":86,"<":87,"<=":88,">":89,">=":90,"+":91,"-":92,"/":93,"%":94,"literal":95,"native_func":96,"CAST":97,"LOWER":98,"UPPER":99,"ROUND":100,"option":101,"LEN":102,"TRUNCATE":103,"TYPEOF":104,"UPDATE":105,"update_list":106,"DELETE":107,"NOT":108,"DOUBLE_LITERAL":109,"DATE_LITERAL":110,"TRUE":111,"FALSE":112,"NULL":113,"INT":114,"DOUBLE":115,"DATE":116,"VARCHAR":117,"BOOLEAN":118,"ID":119,"STRING_LITERAL":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",11:"PRINT",24:"BEGIN",26:"END",31:"BREAK",32:"CONTINUE",33:"IF",34:"THEN",36:"ELSE",37:"CASE",40:"WHEN",41:"FOR",43:"IN",44:"INT_LITERAL",45:"..",46:"WHILE",47:"DECLARE",49:",",50:"@",52:"DEFAULT",53:"SET",54:"=",55:"CREATE",56:"TABLE",57:"(",59:")",60:"ALTER",62:"ADD",63:"DROP",64:"COLUMN",65:"RENAME",66:"TO",67:"INSERT",68:"INTO",70:"VALUES",72:"SELECT",74:"*",75:"FROM",77:"AS",79:"WHERE",81:"AND",83:"OR",86:"!=",87:"<",88:"<=",89:">",90:">=",91:"+",92:"-",93:"/",94:"%",97:"CAST",98:"LOWER",99:"UPPER",100:"ROUND",102:"LEN",103:"TRUNCATE",104:"TYPEOF",105:"UPDATE",107:"DELETE",108:"NOT",109:"DOUBLE_LITERAL",110:"DATE_LITERAL",111:"TRUE",112:"FALSE",113:"NULL",114:"INT",115:"DOUBLE",116:"DATE",117:"VARCHAR",118:"BOOLEAN",119:"ID",120:"STRING_LITERAL"},
productions_: [0,[3,2],[4,3],[4,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[21,3],[25,3],[25,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[19,7],[35,2],[35,0],[20,7],[38,5],[38,4],[22,7],[23,3],[28,2],[48,5],[48,3],[29,6],[30,5],[8,6],[58,4],[58,2],[9,4],[61,3],[61,3],[61,3],[61,5],[10,3],[15,10],[69,3],[69,1],[71,3],[71,1],[14,2],[13,5],[13,5],[73,4],[73,2],[39,2],[39,2],[39,0],[76,2],[76,0],[80,3],[80,3],[80,1],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[84,1],[85,3],[85,3],[85,3],[85,3],[85,3],[85,2],[85,3],[85,2],[85,1],[96,6],[96,4],[96,4],[96,5],[96,4],[96,5],[96,4],[101,2],[101,0],[16,5],[106,5],[106,3],[18,3],[17,4],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[12,3],[12,2],[12,1],[12,1],[12,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[42,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        treeID = 0
        this.$ = $$[$0-1]
        return this.$
    
break;
case 2:

        $$[$0-2].push($$[$0-1])
        this.$ = $$[$0-2]
    
break;
case 3: case 21:

        this.$ = []
        this.$.push($$[$0-1])
    
break;
case 7:
this.$ = new Stmt.Print(treeID++, $$[$0])
break;
case 19:
this.$ = new Stmt.Block(treeID++, $$[$0-1])
break;
case 20:

        this.$ = $$[$0-2]
        this.$.push($$[$0-1])
    
break;
case 25:
this.$ = new Stmt.Break(treeID++)
break;
case 26:
this.$ = new Stmt.Continue(treeID++)
break;
case 28:
this.$ = new Stmt.If(treeID++, $$[$0-5], $$[$0-3], $$[$0-2])
break;
case 29: case 60: case 61: case 63: case 91:
this.$ = $$[$0]
break;
case 31:
this.$ = new Stmt.Case(treeID++, $$[$0-5], $$[$0-4], $$[$0-2], $$[$0])
break;
case 32: case 94:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 33: case 95:

        this.$ = []
        this.$.push([$$[$0-2], $$[$0]])
    
break;
case 34:
this.$ = new Stmt.For(treeID++, $$[$0-5], $$[$0-3], $$[$0-1], $$[$0])
break;
case 35:
this.$ = new Stmt.While(treeID++, $$[$0-1], $$[$0])
break;
case 36:
this.$ = new Stmt.Declare(treeID++, $$[$0])
break;
case 37:

        this.$ = $$[$0-4]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 38: case 43: case 59:

        this.$ = []
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 39:
this.$ = new Stmt.DeclareDefault(treeID++, $$[$0-3], $$[$0-2], $$[$0])
break;
case 40:
this.$ = new Stmt.Set(treeID++, $$[$0-2], $$[$0])
break;
case 41:
this.$ = new Stmt.CreateTable(treeID++, $$[$0-3], $$[$0-1])
break;
case 42: case 58:

        this.$ = $$[$0-3]
        this.$.push([$$[$0-1], $$[$0]])
    
break;
case 44:
this.$ = new Stmt.AlterTable(treeID++, $$[$0-1], $$[$0])
break;
case 45:
this.$ = ['ADD', $$[$0-1], $$[$0]]
break;
case 46:
this.$ = ['DROP', $$[$0]]
break;
case 47:
this.$ = ['RENAME', $$[$0]]
break;
case 48:
this.$ = ['RENAME_C', $$[$0-2], $$[$0]]
break;
case 49:
this.$ = new Stmt.DropTable(treeID++, $$[$0])
break;
case 50:
this.$ = new Stmt.InsertInto(treeID++, $$[$0-7], $$[$0-5], $$[$0-1])
break;
case 51: case 53:

        this.$ = $$[$0-2]
        this.$.push($$[$0])
    
break;
case 52: case 54:

        this.$ = []
        this.$.push($$[$0])
    
break;
case 55:
this.$ = new Stmt.Select(treeID++, $$[$0])
break;
case 56: case 57:
this.$ = new Stmt.SelectFrom(treeID++, $$[$0-1], $$[$0-3], $$[$0])
break;
case 65: case 109:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'AND', $$[$0])
break;
case 66: case 110:
this.$ = new Expr.Binary(treeID++, $$[$0-2], 'OR', $$[$0])
break;
case 68: case 69: case 70: case 71: case 72: case 73: case 75: case 76: case 77: case 78: case 79: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108:
this.$ = new Expr.Binary(treeID++, $$[$0-2], $$[$0-1], $$[$0])
break;
case 74: case 115:
this.$ = new Expr.Identifier(treeID++, $$[$0])
break;
case 80: case 111:
this.$ = new Expr.Unary(treeID++, $$[$0-1], $$[$0])
break;
case 81: case 113:
this.$ = new Expr.Group(treeID++, $$[$0-1])
break;
case 82: case 114:
this.$ = new Expr.Variable(treeID++, $$[$0])
break;
case 84:
this.$ = new Expr.Cast(treeID++, $$[$0-3], $$[$0-1])
break;
case 85:
this.$ = new Expr.Lower(treeID++, $$[$0-1])
break;
case 86:
this.$ = new Expr.Upper(treeID++, $$[$0-1])
break;
case 87:
this.$ = new Expr.Round(treeID++, $$[$0-2], $$[$0-1])
break;
case 88:
this.$ = new Expr.Len(treeID++, $$[$0-1])
break;
case 89:
this.$ = new Expr.Truncate(treeID++, $$[$0-2], $$[$0-1])
break;
case 90:
this.$ = new Expr.TypeOf(treeID++, $$[$0-1])
break;
case 93:
this.$ = new Stmt.UpdateTable(treeID++, $$[$0-3], $$[$0-1], $$[$0])
break;
case 96:
this.$ = new Stmt.TruncateTable(treeID++, $$[$0])
break;
case 97:
this.$ = new Stmt.DeleteFrom(treeID++, $$[$0-1], $$[$0])
break;
case 112:
this.$ = new Expr.Unary(treeID++, 'NOT', $$[$0])
break;
case 118:
this.$ = new Expr.Literal(treeID++, 'INT', $$[$0])
break;
case 119:
this.$ = new Expr.Literal(treeID++, 'DOUBLE', $$[$0])
break;
case 120:
this.$ = new Expr.Literal(treeID++, 'DATE', $$[$0])
break;
case 121:
this.$ = new Expr.Literal(treeID++, 'STRING', $$[$0])
break;
case 122: case 123:
this.$ = new Expr.Literal(treeID++, 'BOOLEAN', $$[$0])
break;
case 124:
this.$ = new Expr.Literal(treeID++, 'NULL', $$[$0])
break;
case 125: case 126: case 127: case 129: case 130:
this.$ = $$[$0].toUpperCase()
break;
case 128:
this.$ = 'STRING'
break;
case 131:
this.$ = $$[$0].toLowerCase()
break;
case 132:
this.$ = $$[$0].slice(1,-1)
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,33:$V2,37:$V3,41:$V4,46:$V5,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{1:[3]},{5:[1,32],6:33,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,33:$V2,37:$V3,41:$V4,46:$V5,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{7:[1,34]},{7:[2,4]},{7:[2,5]},{7:[2,6]},{12:35,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{7:[2,8]},{7:[2,9]},{7:[2,10]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{7:[2,17]},{7:[2,18]},{56:[1,59]},{56:[1,60]},{56:[1,61]},{12:64,42:40,44:$Ve,50:$Vf,57:$Vg,73:63,74:[1,62],78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{68:[1,65]},{42:66,119:$Vv},{75:[1,67]},{56:[1,68]},{12:69,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:70,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{6:78,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:71,27:72,28:73,29:74,30:75,31:$Vx,32:$Vy,33:$V2,37:$V3,41:$V4,46:$V5,47:$Vz,53:$VA,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{42:81,119:$Vv},{12:82,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{1:[2,1]},{7:[1,83]},o($VB,[2,3]),{7:[2,7],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{12:97,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:98,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:99,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{42:100,119:$Vv},o($VP,[2,115]),o($VP,[2,116]),o($VP,[2,117]),o([7,24,26,34,36,40,43,49,53,54,57,59,62,63,65,66,74,75,77,79,81,83,86,87,88,89,90,91,92,93,94,113,114,115,116,117,118],[2,131]),{57:[1,101]},{57:[1,102]},{57:[1,103]},{57:[1,104]},{57:[1,105]},{57:[1,106]},{57:[1,107]},o($VP,[2,118]),o($VP,[2,119]),o($VP,[2,120]),o($VP,[2,121]),o($VP,[2,122]),o($VP,[2,123]),o($VP,[2,124]),o($VP,[2,132]),{42:108,119:$Vv},{42:109,119:$Vv},{42:110,119:$Vv},{75:[1,111]},{7:[2,55],49:[1,113],75:[1,112]},o($VQ,$VR,{39:114,54:$VC,74:$VD,77:$VS,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),{42:116,119:$Vv},{53:[1,117]},{42:118,119:$Vv},{42:119,119:$Vv},{34:[1,120],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{38:121,40:[1,122],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{6:78,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,26:[1,123],27:124,28:73,29:74,30:75,31:$Vx,32:$Vy,33:$V2,37:$V3,41:$V4,46:$V5,47:$Vz,53:$VA,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{7:[1,125]},{7:[2,22]},{7:[2,23]},{7:[2,24]},{7:[2,25]},{7:[2,26]},{7:[2,27]},{48:126,50:[1,127]},{50:[1,128]},{43:[1,129]},{21:130,24:$V1,54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},o($VB,[2,2]),{12:131,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:132,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:133,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:134,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:135,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:136,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:137,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:138,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:139,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:140,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:141,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:142,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:143,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},o($VP,[2,111]),o($VT,[2,112],{54:$VC,74:$VD,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),{54:$VC,59:[1,144],74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},o($VP,[2,114]),{12:145,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:146,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:147,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:148,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:149,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:150,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:151,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{57:[1,152]},{61:153,62:[1,154],63:[1,155],65:[1,156]},{7:[2,49]},{42:157,119:$Vv},{42:158,119:$Vv},{12:159,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},o($VQ,[2,59]),{42:160,78:161,119:$Vv,120:$Vw},{57:[1,162]},{42:164,106:163,119:$Vv},{7:$VU,76:165,79:$VV},{7:[2,96]},{6:78,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:167,27:72,28:73,29:74,30:75,31:$Vx,32:$Vy,33:$V2,37:$V3,41:$V4,46:$V5,47:$Vz,53:$VA,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{36:[1,168],40:[1,169]},{12:170,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{7:[2,19]},{7:[1,171]},o($VW,[2,21]),{7:[2,36],49:[1,172]},{42:173,119:$Vv},{42:174,119:$Vv},{44:[1,175]},{7:[2,35]},o($VX,[2,98],{74:$VD,93:$VN,94:$VO}),o($VX,[2,99],{74:$VD,93:$VN,94:$VO}),o($VP,[2,100]),o($VP,[2,101]),o($VP,[2,102]),o($VY,[2,103],{74:$VD,91:$VL,92:$VM,93:$VN,94:$VO}),o($VY,[2,104],{74:$VD,91:$VL,92:$VM,93:$VN,94:$VO}),o($VY,[2,105],{74:$VD,91:$VL,92:$VM,93:$VN,94:$VO}),o($VY,[2,106],{74:$VD,91:$VL,92:$VM,93:$VN,94:$VO}),o($VY,[2,107],{74:$VD,91:$VL,92:$VM,93:$VN,94:$VO}),o($VY,[2,108],{74:$VD,91:$VL,92:$VM,93:$VN,94:$VO}),o($VT,[2,109],{54:$VC,74:$VD,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),o([7,24,26,34,36,40,49,59,75,77,79,83],[2,110],{54:$VC,74:$VD,81:$VE,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),o($VP,[2,113]),{54:$VC,74:$VD,77:[1,176],81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{54:$VC,59:[1,177],74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{54:$VC,59:[1,178],74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{49:$VZ,54:$VC,59:$V_,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,101:179},{54:$VC,59:[1,181],74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{49:$VZ,54:$VC,59:$V_,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,101:182},{54:$VC,59:[1,183],74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{42:185,58:184,119:$Vv},{7:[2,44]},{42:186,119:$Vv},{64:[1,187]},{64:[1,189],66:[1,188]},{7:$VU,76:190,79:$VV},{7:$VU,76:191,79:$VV},o($VQ,$VR,{39:192,54:$VC,74:$VD,77:$VS,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),o($VQ,[2,60]),o($VQ,[2,61]),{42:194,69:193,119:$Vv},{7:$VU,49:[1,196],76:195,79:$VV},{54:[1,197]},{7:[2,97]},{42:201,80:198,82:199,84:200,119:$Vv},{6:78,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,26:[2,30],27:124,28:73,29:74,30:75,31:$Vx,32:$Vy,33:$V2,35:202,36:[1,203],37:$V3,41:$V4,46:$V5,47:$Vz,53:$VA,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{12:204,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{12:205,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{34:[1,206],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},o($VW,[2,20]),{50:[1,207]},{51:208,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41},{54:[1,215]},{45:[1,216]},{51:217,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41},o($VP,[2,85]),o($VP,[2,86]),{59:[1,218]},{12:219,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},o($VP,[2,88]),{59:[1,220]},o($VP,[2,90]),{49:[1,222],59:[1,221]},{51:223,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41},{51:224,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41},{42:225,119:$Vv},{42:226,119:$Vv},{42:227,119:$Vv},{7:[2,56]},{7:[2,57]},o($VQ,[2,58]),{49:[1,229],59:[1,228]},o($V51,[2,52]),{7:[2,93]},{42:230,119:$Vv},{12:231,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{7:[2,63],81:[1,232],83:[1,233]},o($V61,[2,67]),{54:[1,234],86:[1,235],87:[1,236],88:[1,237],89:[1,238],90:[1,239]},o([54,86,87,88,89,90],[2,74]),{26:[1,240]},{6:78,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,25:241,27:72,28:73,29:74,30:75,31:$Vx,32:$Vy,33:$V2,37:$V3,41:$V4,46:$V5,47:$Vz,53:$VA,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{26:[1,242],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{34:[1,243],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{12:244,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{42:245,119:$Vv},o($V71,[2,38],{52:[1,246]}),o($V81,[2,125]),o($V81,[2,126]),o($V81,[2,127]),o($V81,[2,128]),o($V81,[2,129]),o($V81,[2,130]),{12:247,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{44:[1,248]},{59:[1,249]},o($VP,[2,87]),{54:$VC,59:[2,91],74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},o($VP,[2,89]),{7:[2,41]},{42:250,119:$Vv},o($V51,[2,43]),{7:[2,45]},{7:[2,46]},{7:[2,47]},{66:[1,251]},{70:[1,252]},{42:253,119:$Vv},{54:[1,254]},o($V91,[2,95],{54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),{42:201,82:255,84:200,119:$Vv},{42:201,82:256,84:200,119:$Vv},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:257,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:262,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:263,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:264,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:265,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:266,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{33:[1,267]},{6:78,8:4,9:5,10:6,11:$V0,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:$V1,26:[2,29],27:124,28:73,29:74,30:75,31:$Vx,32:$Vy,33:$V2,37:$V3,41:$V4,46:$V5,47:$Vz,53:$VA,55:$V6,60:$V7,63:$V8,67:$V9,72:$Va,103:$Vb,105:$Vc,107:$Vd},{7:$VR,39:268,77:$VS},{12:269,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},o($Vd1,[2,33],{54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),{51:270,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41},{12:271,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},{7:[2,40],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{21:272,24:$V1},o($VP,[2,84]),{51:273,113:$V$,114:$V01,115:$V11,116:$V21,117:$V31,118:$V41},{42:274,119:$Vv},{57:[1,275]},o($V51,[2,51]),{12:276,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},o($V61,[2,65]),o($V61,[2,66]),o($V61,[2,68],{74:$Ve1,91:$Vf1,92:$Vg1,93:$Vh1,94:$Vi1}),{44:$Ve,50:$Va1,57:$Vb1,78:54,85:282,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:283,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{42:284,119:$Vv},o($Vj1,[2,83]),o($V61,[2,69],{74:$Ve1,91:$Vf1,92:$Vg1,93:$Vh1,94:$Vi1}),o($V61,[2,70],{74:$Ve1,91:$Vf1,92:$Vg1,93:$Vh1,94:$Vi1}),o($V61,[2,71],{74:$Ve1,91:$Vf1,92:$Vg1,93:$Vh1,94:$Vi1}),o($V61,[2,72],{74:$Ve1,91:$Vf1,92:$Vg1,93:$Vh1,94:$Vi1}),o($V61,[2,73],{74:$Ve1,91:$Vf1,92:$Vg1,93:$Vh1,94:$Vi1}),{7:[2,28]},{7:[2,31]},o($Vd1,[2,32],{54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),o($V71,[2,37]),{7:[2,39],54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO},{7:[2,34]},o($V51,[2,42]),{7:[2,48]},{12:286,42:40,44:$Ve,50:$Vf,57:$Vg,71:285,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},o($V91,[2,94],{54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),{44:$Ve,50:$Va1,57:$Vb1,78:54,85:287,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:288,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:289,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:290,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},{44:$Ve,50:$Va1,57:$Vb1,78:54,85:291,92:$Vc1,95:261,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,120:$Vw},o($Vj1,[2,80]),{59:[1,292],74:$Ve1,91:$Vf1,92:$Vg1,93:$Vh1,94:$Vi1},o($Vj1,[2,82]),{49:[1,294],59:[1,293]},o($V51,[2,54],{54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO}),o($Vk1,[2,75],{74:$Ve1,93:$Vh1,94:$Vi1}),o($Vk1,[2,76],{74:$Ve1,93:$Vh1,94:$Vi1}),o($Vj1,[2,77]),o($Vj1,[2,78]),o($Vj1,[2,79]),o($Vj1,[2,81]),{7:[2,50]},{12:295,42:40,44:$Ve,50:$Vf,57:$Vg,78:54,92:$Vh,95:42,96:41,97:$Vi,98:$Vj,99:$Vk,100:$Vl,102:$Vm,103:$Vn,104:$Vo,108:$Vp,109:$Vq,110:$Vr,111:$Vs,112:$Vt,113:$Vu,119:$Vv,120:$Vw},o($V51,[2,53],{54:$VC,74:$VD,81:$VE,83:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO})],
defaultActions: {4:[2,4],5:[2,5],6:[2,6],8:[2,8],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],17:[2,17],18:[2,18],32:[2,1],73:[2,22],74:[2,23],75:[2,24],76:[2,25],77:[2,26],78:[2,27],110:[2,49],119:[2,96],123:[2,19],130:[2,35],153:[2,44],165:[2,97],190:[2,56],191:[2,57],195:[2,93],221:[2,41],224:[2,45],225:[2,46],226:[2,47],267:[2,28],268:[2,31],272:[2,34],274:[2,48],293:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const Expr = require('../interpreter/Expression.cjs');
const Stmt = require('../interpreter/Statement.cjs');
var treeID = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* no hacer nada */
break;
case 1:/* no hacer nada */
break;
case 2:this.pushState('comment');
break;
case 3:/* no hacer nada */
break;
case 4:/* no hacer nada */
break;
case 5:yy_.yylineno++
break;
case 6:this.popState();
break;
case 7:return 111
break;
case 8:return 112
break;
case 9:return 47
break;
case 10:return 52
break;
case 11:return 53
break;
case 12:return 55
break;
case 13:return 56
break;
case 14:return 60
break;
case 15:return 56
break;
case 16:return 62
break;
case 17:return 63
break;
case 18:return 65
break;
case 19:return 64
break;
case 20:return 66
break;
case 21:return 81
break;
case 22:return 83
break;
case 23:return 108
break;
case 24:return 114
break;
case 25:return 115
break;
case 26:return 116
break;
case 27:return 117
break;
case 28:return 118
break;
case 29:return 113
break;
case 30:return 11
break;
case 31:return 67
break;
case 32:return 68
break;
case 33:return 70
break;
case 34:return 72
break;
case 35:return 75
break;
case 36:return 79
break;
case 37:return 77
break;
case 38:return 105
break;
case 39:return 103
break;
case 40:return 107
break;
case 41:return 97
break;
case 42:return 98
break;
case 43:return 99
break;
case 44:return 100
break;
case 45:return 102
break;
case 46:return 104
break;
case 47:return 24
break;
case 48:return 26
break;
case 49:return 41
break;
case 50:return 43
break;
case 51:return 46
break;
case 52:return 31
break;
case 53:return 32
break;
case 54:return 33
break;
case 55:return 34
break;
case 56:return 36
break;
case 57:return 37
break;
case 58:return 40
break;
case 59:return 45
break;
case 60:return 7
break;
case 61:return 50
break;
case 62:return 49
break;
case 63:return 57
break;
case 64:return 59
break;
case 65:return 91
break;
case 66:return 92
break;
case 67:return 74
break;
case 68:return 93
break;
case 69:return 94
break;
case 70:return 54
break;
case 71:return 89
break;
case 72:return 90
break;
case 73:return 87
break;
case 74:return 88
break;
case 75:return 86
break;
case 76:return 110
break;
case 77:return 109
break;
case 78:return 44
break;
case 79:return 120
break;
case 80:return 119
break;
case 81:return 5
break;
case 82:return 'INVALID'
break;
case 83:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:--.*)/i,/^(?:\/\*)/i,/^(?:[^*\n]+)/i,/^(?:\*)/i,/^(?:\n)/i,/^(?:\*\/)/i,/^(?:true)/i,/^(?:false)/i,/^(?:declare)/i,/^(?:default)/i,/^(?:set)/i,/^(?:create)/i,/^(?:table)/i,/^(?:alter)/i,/^(?:table)/i,/^(?:add)/i,/^(?:drop)/i,/^(?:rename)/i,/^(?:column)/i,/^(?:to)/i,/^(?:and)/i,/^(?:or)/i,/^(?:not)/i,/^(?:int)/i,/^(?:double)/i,/^(?:date)/i,/^(?:varchar)/i,/^(?:boolean)/i,/^(?:null)/i,/^(?:print)/i,/^(?:insert)/i,/^(?:into)/i,/^(?:values)/i,/^(?:select)/i,/^(?:from)/i,/^(?:where)/i,/^(?:as)/i,/^(?:update)/i,/^(?:truncate)/i,/^(?:delete)/i,/^(?:cast)/i,/^(?:lower)/i,/^(?:upper)/i,/^(?:round)/i,/^(?:len)/i,/^(?:typeof)/i,/^(?:begin)/i,/^(?:end)/i,/^(?:for)/i,/^(?:in)/i,/^(?:while)/i,/^(?:break)/i,/^(?:continue)/i,/^(?:if)/i,/^(?:then)/i,/^(?:else)/i,/^(?:case)/i,/^(?:when)/i,/^(?:\.\.)/i,/^(?:;)/i,/^(?:@)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:(19|20)\d\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01]))/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"(\\.|[^"\\])*")/i,/^(?:[a-z][a-z0-9_-]*)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[3,4,5,6],"inclusive":false},"INITIAL":{"rules":[0,1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
/*
    Regex para string con caracteres de escape
    - https://stackoverflow.com/questions/2039795/regular-expression-for-a-string-literal-in-flex-lex

    Regex para comentario multilinea
    - https://westes.github.io/flex/manual/How-can-I-match-C_002dstyle-comments_003f.html
    - https://gerhobbelt.github.io/jison/docs/#lexical-analysis

    Regex para fecha
    - https://www.regular-expressions.info/dates.html
*/;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = query_parser;
exports.Parser = query_parser.Parser;
exports.parse = function () { return query_parser.parse.apply(query_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}